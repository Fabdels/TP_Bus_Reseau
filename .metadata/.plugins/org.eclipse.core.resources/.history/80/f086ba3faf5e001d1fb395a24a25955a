/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>

#include "capteurBMP.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t BMP280_I2Caddr = 0x77<<1;
uint8_t calibrationParam[calibSize];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void I2C1_test(void);
void BMPconfig(void);
void BMPcalibrate(char affiche);
void affichMes(char compenser);
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T, uint8_t calibration[calibSize]);
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P, uint8_t calibration[calibSize]);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C1_test(void){
	int I2C_transmit = 0xD0;
	int I2C_receive = 0x00000000;

	HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, &I2C_transmit, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, &I2C_receive, 1, HAL_MAX_DELAY);

	printf("I2C1.1 : '%x'\r\n", I2C_receive); //affiche <<I2C1.1 : '58'>>
}

void BMPconfig(){
	uint8_t normalMode = 0b11;
	uint8_t presOvSamp_x16 = 0b101<<2;
	uint8_t tempOvSamp_x02 = 0b010<<5;
	uint8_t ctrl_meas = 0xF4;
	uint8_t I2C_transmitMsg[2] = {ctrl_meas, tempOvSamp_x02|presOvSamp_x16|normalMode};
	uint8_t I2C_receiveMsg[2];

	HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, I2C_transmitMsg, 2, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, I2C_receiveMsg, 1, HAL_MAX_DELAY);
	printf("BMPconfig: '%x'\r\n", I2C_receiveMsg[0]); //affiche <<BMPconfig: '57'>>
}

void BMPcalibrate(char affiche){
	uint8_t I2C_transmitMsgV = calib00;
	uint8_t I2C_receiveMsg[calibSize];
	int i;

	HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, &I2C_transmitMsgV, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, I2C_receiveMsg, calibSize, HAL_MAX_DELAY);

	for(i=0;i<calibSize;i++){
		calibrationParam[i] = I2C_receiveMsg[i];
		if (affiche) printf("Config register %x: '%x'\r\n", calib00 + i, I2C_receiveMsg[i]);
	}
}

void affichMes(char compenser){
	uint8_t I2C_transmitMsgV = press_msb;
	uint8_t I2C_receiveMsg[measureSize];
	int measTemp, measPress, realTemp, realPress;

	HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, &I2C_transmitMsgV, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, I2C_receiveMsg, measureSize, HAL_MAX_DELAY);
	measPress = I2C_receiveMsg[0]<<(12)|I2C_receiveMsg[1]<<(4)|I2C_receiveMsg[2]>>(4);
	measTemp = I2C_receiveMsg[3]<<(12)|I2C_receiveMsg[4]<<(4)|I2C_receiveMsg[5]>>(4);
	if (!compenser){
		printf("pression: '%x'\r\n", measPress);
		printf("temperature: '%x'\r\n", measTemp);
	}
	else{
		realTemp = bmp280_compensate_T_int32(measTemp, calibrationParam);
		realPress = bmp280_compensate_P_int64(measPress, calibrationParam);

		printf("pression: '%d'\r\n", realPress/25600);
		printf("temperature: '%d'\r\n", realTemp/100);
	}
}

// t_fine carries fine temperature as global value
BMP280_S32_t t_fine;
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123�? equals 51.23 DegC.
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T, uint8_t calibration[calibSize]){
	BMP280_S32_t var1, var2, T;
	unsigned short dig_T1 = calibration[0] | calibration[1] <<16;
	signed short dig_T2 = calibration[2] | calibration[3] <<16;
	signed short dig_T3 = calibration[4] | (calibration[5] <<16);

	//var1 = (((adc_T >> 3) - ((BMP280_S32_t) dig_T1<<1)) * ((BMP280_S32_t) dig_T2)) >> 11;
	//var2 = (((adc_T >> 4) - ((BMP280_S32_t) dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t) dig_T1))) >> 12 * ((BMP280_S32_t) dig_T3) >> 14;
	var1 = ((adc_T >> 14) - (dig_T1 >> 10)) * dig_T2;
	var2 = ((adc_T >> 17) - (dig_T1 >> 13)) * ((adc_T >> 17) - (dig_T1 >> 13)) * dig_T2;
	t_fine = var1 + var2;
	//T = (t_fine * 5 + 128) >> 8;
	T = (var1 + var2) / 51.20;
	return T;
}

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867�? represents 24674867/256 = 96386.2 Pa = 963.862 hPa
BMP280_U32_t bmp280_compensate_P_int64(BMP280_S32_t adc_P, uint8_t calibration[calibSize]){
	BMP280_S64_t var1, var2, p;
	unsigned short dig_P1 = calibration[6] | calibration[7] <<16;
	signed short dig_P2 = calibration[8] | calibration[9] <<16;
	signed short dig_P3 = calibration[10] | (calibration[11] <<16);
	signed short dig_P4 = calibration[12] | calibration[13] <<16;
	signed short dig_P5 = calibration[14] | calibration[15] <<16;
	signed short dig_P6 = calibration[16] | (calibration[17] <<16);
	signed short dig_P7 = calibration[18] | calibration[19] <<16;
	signed short dig_P8 = calibration[20] | calibration[21] <<16;
	signed short dig_P9 = calibration[22] | (calibration[23] <<16);

	var1 = ((BMP280_S64_t)t_fine) - 128000;;
	var2 = var1 * var1 * (BMP280_S64_t)dig_P6;
	var2 = var2 + ((var1*(BMP280_S64_t)dig_P5)<<17);
	var2 = var2 + (((BMP280_S64_t)dig_P4)<<35);
	var1 = ((var1 * var1 * (BMP280_S64_t)dig_P3)>>8) + ((var1 * (BMP280_S64_t)dig_P2)<<12);
	var1 = (((((BMP280_S64_t)1)<<47)+var1))*((BMP280_S64_t)dig_P1)>>33;
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576-adc_P;
	p = (((p<<31)-var2)*3125)/var1;
	var1 = (((BMP280_S64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
	var2 = (((BMP280_S64_t)dig_P8) * p) >> 19;
	p = ((p + var1 + var2) >> 8) + (((BMP280_S64_t)dig_P7)<<4);
	return (BMP280_U32_t)p;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN1_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

	char afficheurCompteur = 0;

	HAL_CAN_Start(&hcan1);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	printf("\r\nHelloWorld!\r\n\n\n");
	//I2C1_test();
	//BMPconfig();
	//BMPcalibrate(1);

	uint8_t pData = 0;


	CAN_TxHeaderTypeDef Header =  { .StdId = 0x60,
			.ExtId = 0x61,
			.IDE = CAN_ID_STD,
			.RTR = CAN_RTR_DATA,
			.DLC = 2,
			.TransmitGlobalTime = DISABLE};


	uint8_t aData[] = {90, 0x01};
	uint32_t pTxMailbox[12];

	uint32_t status1 = 12;
	uint32_t status2 = 12;
	printf("%d, %d\r\n",status1, status2);



	while (1)
	{


		if(HAL_OK != HAL_CAN_AddTxMessage(&hcan1, &Header, aData, pTxMailbox)){
			printf("error\r\n");
		}
		status1 = HAL_CAN_IsTxMessagePending(&hcan1, pTxMailbox);
		HAL_Delay(1000);
		status2 = HAL_CAN_IsTxMessagePending(&hcan1, pTxMailbox);
		printf("%d, %d\r\n",status1, status2);
		HAL_Delay(1000);
		/*//HAL_Delay(1000);
		printf("aData[0] : %d\r\n", aData[0]);
		HAL_Delay(1000);


		aData[0] = 1;
		HAL_CAN_AddTxMessage (&hcan1, &Header, aData, pTxMailbox);
		printf("aData[0] : %d\r\n", aData[0]);
		HAL_Delay(1000);
		aData[0] = 0;*/

		/*
		HAL_UART_Receive(USART1, &pData, sizeof(uint8_t), HAL_MAX_DELAY);
		printf("%d lettre: %c\r\n",afficheurCompteur, pData);
		HAL_Delay(2000);
		HAL_UART_Transmit(USART1, &pData, sizeof(uint8_t), HAL_MAX_DELAY);

		//affichMes(0);
		//affichMes(1);
		afficheurCompteur = 1 - afficheurCompteur;
		printf("%d\r\n", afficheurCompteur);
		HAL_Delay(20000);

		 */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
