
TP_Bus_Reseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006210  08006210  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006218  08006218  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08006220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000224  08006444  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08006444  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fce6  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002656  00000000  00000000  0002ff3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00032590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00033228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002316b  00000000  00000000  00033dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001173c  00000000  00000000  00056f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cefac  00000000  00000000  00068677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb0  00000000  00000000  00137674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f6c 	.word	0x08005f6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	08005f6c 	.word	0x08005f6c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_CAN1_Init+0x60>)
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <MX_CAN1_Init+0x64>)
 80005ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 28;
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_CAN1_Init+0x60>)
 80005f0:	221c      	movs	r2, #28
 80005f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_CAN1_Init+0x60>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_CAN1_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_CAN1_Init+0x60>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_CAN1_Init+0x60>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = ENABLE;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_CAN1_Init+0x60>)
 800060e:	2201      	movs	r2, #1
 8000610:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_CAN1_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_CAN1_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_CAN1_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_CAN1_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_CAN1_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_CAN1_Init+0x60>)
 8000632:	f000 ff3b 	bl	80014ac <HAL_CAN_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800063c:	f000 fc40 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000240 	.word	0x20000240
 8000648:	40006400 	.word	0x40006400

0800064c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <HAL_CAN_MspInit+0x84>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d12c      	bne.n	80006c8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <HAL_CAN_MspInit+0x88>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_CAN_MspInit+0x88>)
 8000678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_CAN_MspInit+0x88>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_CAN_MspInit+0x88>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_CAN_MspInit+0x88>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_CAN_MspInit+0x88>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006b8:	2309      	movs	r3, #9
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_CAN_MspInit+0x8c>)
 80006c4:	f001 f9d6 	bl	8001a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40006400 	.word	0x40006400
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020400 	.word	0x40020400

080006dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_I2C1_Init+0x50>)
 800076a:	f001 fb17 	bl	8001d9c <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fba4 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000268 	.word	0x20000268
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <HAL_I2C_MspInit+0x84>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d12b      	bne.n	8000802 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_I2C_MspInit+0x88>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_I2C_MspInit+0x88>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_I2C_MspInit+0x88>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007c6:	23c0      	movs	r3, #192	; 0xc0
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ca:	2312      	movs	r3, #18
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d6:	2304      	movs	r3, #4
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <HAL_I2C_MspInit+0x8c>)
 80007e2:	f001 f947 	bl	8001a74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_I2C_MspInit+0x88>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_I2C_MspInit+0x88>)
 80007f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_I2C_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40005400 	.word	0x40005400
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400

08000818 <I2C1_test>:
double bmp280_compensate_P_double(BMP280_S32_t adc_P);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C1_test(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af02      	add	r7, sp, #8
	int I2C_transmit = 0xD0;
 800081e:	23d0      	movs	r3, #208	; 0xd0
 8000820:	607b      	str	r3, [r7, #4]
	int I2C_receive = 0x00000000;
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]

	HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, &I2C_transmit, 1, HAL_MAX_DELAY);
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <I2C1_test+0x4c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b299      	uxth	r1, r3
 800082c:	1d3a      	adds	r2, r7, #4
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <I2C1_test+0x50>)
 8000838:	f001 fbf4 	bl	8002024 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, &I2C_receive, 1, HAL_MAX_DELAY);
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <I2C1_test+0x4c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b299      	uxth	r1, r3
 8000842:	463a      	mov	r2, r7
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <I2C1_test+0x50>)
 800084e:	f001 fce7 	bl	8002220 <HAL_I2C_Master_Receive>

	printf("I2C1.1 : '%x'\r\n", I2C_receive); //affiche <<I2C1.1 : '58'>>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <I2C1_test+0x54>)
 8000858:	f004 f8c8 	bl	80049ec <iprintf>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200001b2 	.word	0x200001b2
 8000868:	20000268 	.word	0x20000268
 800086c:	08005f84 	.word	0x08005f84

08000870 <BMPconfig>:

void BMPconfig(){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
	uint8_t normalMode = 0b11;
 8000876:	2303      	movs	r3, #3
 8000878:	73fb      	strb	r3, [r7, #15]
	uint8_t presOvSamp_x16 = 0b101<<2;
 800087a:	2314      	movs	r3, #20
 800087c:	73bb      	strb	r3, [r7, #14]
	uint8_t tempOvSamp_x02 = 0b010<<5;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	737b      	strb	r3, [r7, #13]
	uint8_t ctrl_meas = 0xF4;
 8000882:	23f4      	movs	r3, #244	; 0xf4
 8000884:	733b      	strb	r3, [r7, #12]
	uint8_t I2C_transmitMsg[2] = {ctrl_meas, tempOvSamp_x02|presOvSamp_x16|normalMode};
 8000886:	7b3b      	ldrb	r3, [r7, #12]
 8000888:	723b      	strb	r3, [r7, #8]
 800088a:	7b7a      	ldrb	r2, [r7, #13]
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	4313      	orrs	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4313      	orrs	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	727b      	strb	r3, [r7, #9]
	uint8_t I2C_receiveMsg[2];

	HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, I2C_transmitMsg, 2, HAL_MAX_DELAY);
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <BMPconfig+0x6c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b299      	uxth	r1, r3
 80008a0:	f107 0208 	add.w	r2, r7, #8
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2302      	movs	r3, #2
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <BMPconfig+0x70>)
 80008ae:	f001 fbb9 	bl	8002024 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, I2C_receiveMsg, 1, HAL_MAX_DELAY);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <BMPconfig+0x6c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b299      	uxth	r1, r3
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2301      	movs	r3, #1
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <BMPconfig+0x70>)
 80008c4:	f001 fcac 	bl	8002220 <HAL_I2C_Master_Receive>
	printf("BMPconfig: '%x'\r\n", I2C_receiveMsg[0]); //affiche <<BMPconfig: '57'>>
 80008c8:	793b      	ldrb	r3, [r7, #4]
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <BMPconfig+0x74>)
 80008ce:	f004 f88d 	bl	80049ec <iprintf>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001b2 	.word	0x200001b2
 80008e0:	20000268 	.word	0x20000268
 80008e4:	08005f94 	.word	0x08005f94

080008e8 <BMPcalibrate>:

void BMPcalibrate(char affiche){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t I2C_transmitMsgV = calib00;
 80008f2:	2388      	movs	r3, #136	; 0x88
 80008f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t I2C_receiveMsg[calibSize];
	int i;

	HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, &I2C_transmitMsgV, 1, HAL_MAX_DELAY);
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <BMPcalibrate+0x90>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b299      	uxth	r1, r3
 80008fe:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	481c      	ldr	r0, [pc, #112]	; (800097c <BMPcalibrate+0x94>)
 800090c:	f001 fb8a 	bl	8002024 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, I2C_receiveMsg, calibSize, HAL_MAX_DELAY);
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <BMPcalibrate+0x90>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b299      	uxth	r1, r3
 8000916:	f107 0208 	add.w	r2, r7, #8
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2318      	movs	r3, #24
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <BMPcalibrate+0x94>)
 8000924:	f001 fc7c 	bl	8002220 <HAL_I2C_Master_Receive>

	for(i=0;i<calibSize;i++){
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
 800092c:	e01b      	b.n	8000966 <BMPcalibrate+0x7e>
		calibrationParam[i] = I2C_receiveMsg[i];
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	4413      	add	r3, r2
 8000936:	7819      	ldrb	r1, [r3, #0]
 8000938:	4a11      	ldr	r2, [pc, #68]	; (8000980 <BMPcalibrate+0x98>)
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	4413      	add	r3, r2
 800093e:	460a      	mov	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
		if (affiche) printf("Config register %x: '%x'\r\n", calib00 + i, I2C_receiveMsg[i]);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00b      	beq.n	8000960 <BMPcalibrate+0x78>
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800094e:	f107 0208 	add.w	r2, r7, #8
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	480a      	ldr	r0, [pc, #40]	; (8000984 <BMPcalibrate+0x9c>)
 800095c:	f004 f846 	bl	80049ec <iprintf>
	for(i=0;i<calibSize;i++){
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	3301      	adds	r3, #1
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	2b17      	cmp	r3, #23
 800096a:	dde0      	ble.n	800092e <BMPcalibrate+0x46>
	}
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200001b2 	.word	0x200001b2
 800097c:	20000268 	.word	0x20000268
 8000980:	200003f0 	.word	0x200003f0
 8000984:	08005fa8 	.word	0x08005fa8

08000988 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0a8      	sub	sp, #160	; 0xa0
 800098c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	char*		token;
	int 		newCmdReady = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int			speedValue = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009a0:	f000 fcee 	bl	8001380 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009a4:	f000 fa08 	bl	8000db8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009a8:	f7ff fe98 	bl	80006dc <MX_GPIO_Init>
	MX_CAN1_Init();
 80009ac:	f7ff fe1a 	bl	80005e4 <MX_CAN1_Init>
	MX_I2C1_Init();
 80009b0:	f7ff febc 	bl	800072c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80009b4:	f000 fbda 	bl	800116c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80009b8:	f000 fc02 	bl	80011c0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2224      	movs	r2, #36	; 0x24
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 f809 	bl	80049dc <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80009ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ce:	2240      	movs	r2, #64	; 0x40
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 f802 	bl	80049dc <memset>
 80009d8:	4baf      	ldr	r3, [pc, #700]	; (8000c98 <main+0x310>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80009de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009e2:	2100      	movs	r1, #0
 80009e4:	48ad      	ldr	r0, [pc, #692]	; (8000c9c <main+0x314>)
 80009e6:	f003 fff9 	bl	80049dc <memset>

	HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80009ea:	2201      	movs	r2, #1
 80009ec:	49aa      	ldr	r1, [pc, #680]	; (8000c98 <main+0x310>)
 80009ee:	48ac      	ldr	r0, [pc, #688]	; (8000ca0 <main+0x318>)
 80009f0:	f003 f831 	bl	8003a56 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f000 fd35 	bl	8001464 <HAL_Delay>
	HAL_UART_Transmit(&huart1, started, sizeof(started), HAL_MAX_DELAY);
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	2261      	movs	r2, #97	; 0x61
 8000a00:	49a8      	ldr	r1, [pc, #672]	; (8000ca4 <main+0x31c>)
 8000a02:	48a7      	ldr	r0, [pc, #668]	; (8000ca0 <main+0x318>)
 8000a04:	f002 ff95 	bl	8003932 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	2215      	movs	r2, #21
 8000a0e:	49a6      	ldr	r1, [pc, #664]	; (8000ca8 <main+0x320>)
 8000a10:	48a3      	ldr	r0, [pc, #652]	; (8000ca0 <main+0x318>)
 8000a12:	f002 ff8e 	bl	8003932 <HAL_UART_Transmit>

	char afficheurCompteur = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	HAL_CAN_Start(&hcan1);
 8000a1c:	48a3      	ldr	r0, [pc, #652]	; (8000cac <main+0x324>)
 8000a1e:	f000 fe40 	bl	80016a2 <HAL_CAN_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	printf("\r\nHelloWorld!\r\n\n\n");
 8000a22:	48a3      	ldr	r0, [pc, #652]	; (8000cb0 <main+0x328>)
 8000a24:	f004 f868 	bl	8004af8 <puts>
	I2C1_test();
 8000a28:	f7ff fef6 	bl	8000818 <I2C1_test>
	BMPconfig();
 8000a2c:	f7ff ff20 	bl	8000870 <BMPconfig>
	BMPcalibrate(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ff59 	bl	80008e8 <BMPcalibrate>

	uint8_t pData = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	while (1)
	{

		//UART 2

		if(uartRxReceived){
 8000a3c:	4b9d      	ldr	r3, [pc, #628]	; (8000cb4 <main+0x32c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d066      	beq.n	8000b12 <main+0x18a>
			switch(uartRxBuffer[0]){
 8000a44:	4b94      	ldr	r3, [pc, #592]	; (8000c98 <main+0x310>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b0d      	cmp	r3, #13
 8000a4a:	d002      	beq.n	8000a52 <main+0xca>
 8000a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a4e:	d039      	beq.n	8000ac4 <main+0x13c>
 8000a50:	e04a      	b.n	8000ae8 <main+0x160>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart1, newline, sizeof(newline), HAL_MAX_DELAY);
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2203      	movs	r2, #3
 8000a58:	4997      	ldr	r1, [pc, #604]	; (8000cb8 <main+0x330>)
 8000a5a:	4891      	ldr	r0, [pc, #580]	; (8000ca0 <main+0x318>)
 8000a5c:	f002 ff69 	bl	8003932 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000a60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000a64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a68:	4413      	add	r3, r2
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				token = strtok(cmdBuffer, " ");
 8000a74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a78:	4990      	ldr	r1, [pc, #576]	; (8000cbc <main+0x334>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 f864 	bl	8004b48 <strtok>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				while(token!=NULL){
 8000a86:	e012      	b.n	8000aae <main+0x126>
					argv[argc++] = token;
 8000a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	3398      	adds	r3, #152	; 0x98
 8000a96:	443b      	add	r3, r7
 8000a98:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000a9c:	f843 2c84 	str.w	r2, [r3, #-132]
					token = strtok(NULL, " ");
 8000aa0:	4986      	ldr	r1, [pc, #536]	; (8000cbc <main+0x334>)
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f004 f850 	bl	8004b48 <strtok>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				while(token!=NULL){
 8000aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1e8      	bne.n	8000a88 <main+0x100>
				}

				idx_cmd = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				newCmdReady = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				break;
 8000ac2:	e023      	b.n	8000b0c <main+0x184>

				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 8000ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000ace:	3398      	adds	r3, #152	; 0x98
 8000ad0:	443b      	add	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f803 2c60 	strb.w	r2, [r3, #-96]
				HAL_UART_Transmit(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	2201      	movs	r2, #1
 8000ade:	496e      	ldr	r1, [pc, #440]	; (8000c98 <main+0x310>)
 8000ae0:	486f      	ldr	r0, [pc, #444]	; (8000ca0 <main+0x318>)
 8000ae2:	f002 ff26 	bl	8003932 <HAL_UART_Transmit>
				break;
 8000ae6:	e011      	b.n	8000b0c <main+0x184>

				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000ae8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000aec:	1c5a      	adds	r2, r3, #1
 8000aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000af2:	4a69      	ldr	r2, [pc, #420]	; (8000c98 <main+0x310>)
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	3398      	adds	r3, #152	; 0x98
 8000af8:	443b      	add	r3, r7
 8000afa:	f803 2c60 	strb.w	r2, [r3, #-96]
				HAL_UART_Transmit(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	2201      	movs	r2, #1
 8000b04:	4964      	ldr	r1, [pc, #400]	; (8000c98 <main+0x310>)
 8000b06:	4866      	ldr	r0, [pc, #408]	; (8000ca0 <main+0x318>)
 8000b08:	f002 ff13 	bl	8003932 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000b0c:	4b69      	ldr	r3, [pc, #420]	; (8000cb4 <main+0x32c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000b12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d090      	beq.n	8000a3c <main+0xb4>

			// Showing commands
			if(strcmp(argv[0],"help")==0){
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4968      	ldr	r1, [pc, #416]	; (8000cc0 <main+0x338>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb76 	bl	8000210 <strcmp>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10c      	bne.n	8000b44 <main+0x1bc>
				sprintf(uartTxBuffer,commandList);
 8000b2a:	4966      	ldr	r1, [pc, #408]	; (8000cc4 <main+0x33c>)
 8000b2c:	485b      	ldr	r0, [pc, #364]	; (8000c9c <main+0x314>)
 8000b2e:	f003 ffeb 	bl	8004b08 <siprintf>
				HAL_UART_Transmit(&huart1, uartTxBuffer, sizeof(commandList), HAL_MAX_DELAY);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8000b3a:	4958      	ldr	r1, [pc, #352]	; (8000c9c <main+0x314>)
 8000b3c:	4858      	ldr	r0, [pc, #352]	; (8000ca0 <main+0x318>)
 8000b3e:	f002 fef8 	bl	8003932 <HAL_UART_Transmit>
 8000b42:	e11c      	b.n	8000d7e <main+0x3f6>
			}

			// Saying hello
			else if(strcmp(argv[0],"hello")==0){
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	4960      	ldr	r1, [pc, #384]	; (8000cc8 <main+0x340>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb61 	bl	8000210 <strcmp>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10f      	bne.n	8000b74 <main+0x1ec>
				sprintf(uartTxBuffer,"Hello human !");
 8000b54:	495d      	ldr	r1, [pc, #372]	; (8000ccc <main+0x344>)
 8000b56:	4851      	ldr	r0, [pc, #324]	; (8000c9c <main+0x314>)
 8000b58:	f003 ffd6 	bl	8004b08 <siprintf>
				HAL_UART_Transmit(&huart1, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000b5c:	484f      	ldr	r0, [pc, #316]	; (8000c9c <main+0x314>)
 8000b5e:	f7ff fb61 	bl	8000224 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	494c      	ldr	r1, [pc, #304]	; (8000c9c <main+0x314>)
 8000b6c:	484c      	ldr	r0, [pc, #304]	; (8000ca0 <main+0x318>)
 8000b6e:	f002 fee0 	bl	8003932 <HAL_UART_Transmit>
 8000b72:	e104      	b.n	8000d7e <main+0x3f6>
			}

			// Get temperature
			else if(strcmp(argv[0],"GET_T")==0){
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	4956      	ldr	r1, [pc, #344]	; (8000cd0 <main+0x348>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fb49 	bl	8000210 <strcmp>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d134      	bne.n	8000bee <main+0x266>
				uint8_t I2C_transmitMsgV = press_msb;
 8000b84:	23f7      	movs	r3, #247	; 0xf7
 8000b86:	74fb      	strb	r3, [r7, #19]
				uint8_t I2C_receiveMsg[measureSize];
				int measTemp;

				HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, &I2C_transmitMsgV, 1, HAL_MAX_DELAY);
 8000b88:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <main+0x34c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	f107 0213 	add.w	r2, r7, #19
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	484f      	ldr	r0, [pc, #316]	; (8000cd8 <main+0x350>)
 8000b9c:	f001 fa42 	bl	8002024 <HAL_I2C_Master_Transmit>
				HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, I2C_receiveMsg, measureSize, HAL_MAX_DELAY);
 8000ba0:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <main+0x34c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b299      	uxth	r1, r3
 8000ba6:	f107 020c 	add.w	r2, r7, #12
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	4849      	ldr	r0, [pc, #292]	; (8000cd8 <main+0x350>)
 8000bb4:	f001 fb34 	bl	8002220 <HAL_I2C_Master_Receive>
				measTemp = I2C_receiveMsg[3]<<(12)|I2C_receiveMsg[4]<<(4)|I2C_receiveMsg[5]>>(4);
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	031a      	lsls	r2, r3, #12
 8000bbc:	7c3b      	ldrb	r3, [r7, #16]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	7c7a      	ldrb	r2, [r7, #17]
 8000bc4:	0912      	lsrs	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	67bb      	str	r3, [r7, #120]	; 0x78
				sprintf(uartTxBuffer,"T = %xH\n\r", measTemp);
 8000bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000bce:	4943      	ldr	r1, [pc, #268]	; (8000cdc <main+0x354>)
 8000bd0:	4832      	ldr	r0, [pc, #200]	; (8000c9c <main+0x314>)
 8000bd2:	f003 ff99 	bl	8004b08 <siprintf>
				HAL_UART_Transmit(&huart1, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000bd6:	4831      	ldr	r0, [pc, #196]	; (8000c9c <main+0x314>)
 8000bd8:	f7ff fb24 	bl	8000224 <strlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	492d      	ldr	r1, [pc, #180]	; (8000c9c <main+0x314>)
 8000be6:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <main+0x318>)
 8000be8:	f002 fea3 	bl	8003932 <HAL_UART_Transmit>
 8000bec:	e0c7      	b.n	8000d7e <main+0x3f6>
			}

			// Get pressure
			else if(strcmp(argv[0],"GET_P")==0){
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	493b      	ldr	r1, [pc, #236]	; (8000ce0 <main+0x358>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fb0c 	bl	8000210 <strcmp>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d133      	bne.n	8000c66 <main+0x2de>
				int measPress;
				uint8_t I2C_transmitMsgV = press_msb;
 8000bfe:	23f7      	movs	r3, #247	; 0xf7
 8000c00:	72fb      	strb	r3, [r7, #11]
				uint8_t I2C_receiveMsg[measureSize];

				HAL_I2C_Master_Transmit(&hi2c1,BMP280_I2Caddr, &I2C_transmitMsgV, 1, HAL_MAX_DELAY);
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <main+0x34c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b299      	uxth	r1, r3
 8000c08:	f107 020b 	add.w	r2, r7, #11
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	4830      	ldr	r0, [pc, #192]	; (8000cd8 <main+0x350>)
 8000c16:	f001 fa05 	bl	8002024 <HAL_I2C_Master_Transmit>
				HAL_I2C_Master_Receive(&hi2c1, BMP280_I2Caddr, I2C_receiveMsg, measureSize, HAL_MAX_DELAY);
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <main+0x34c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b299      	uxth	r1, r3
 8000c20:	1d3a      	adds	r2, r7, #4
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2306      	movs	r3, #6
 8000c2a:	482b      	ldr	r0, [pc, #172]	; (8000cd8 <main+0x350>)
 8000c2c:	f001 faf8 	bl	8002220 <HAL_I2C_Master_Receive>
				measPress = I2C_receiveMsg[0]<<(12)|I2C_receiveMsg[1]<<(4)|I2C_receiveMsg[2]>>(4);
 8000c30:	793b      	ldrb	r3, [r7, #4]
 8000c32:	031a      	lsls	r2, r3, #12
 8000c34:	797b      	ldrb	r3, [r7, #5]
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	79ba      	ldrb	r2, [r7, #6]
 8000c3c:	0912      	lsrs	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	4313      	orrs	r3, r2
 8000c42:	67fb      	str	r3, [r7, #124]	; 0x7c
				sprintf(uartTxBuffer,"P = %xH\n\r", measPress);
 8000c44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000c46:	4927      	ldr	r1, [pc, #156]	; (8000ce4 <main+0x35c>)
 8000c48:	4814      	ldr	r0, [pc, #80]	; (8000c9c <main+0x314>)
 8000c4a:	f003 ff5d 	bl	8004b08 <siprintf>
				HAL_UART_Transmit(&huart1, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <main+0x314>)
 8000c50:	f7ff fae8 	bl	8000224 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	490f      	ldr	r1, [pc, #60]	; (8000c9c <main+0x314>)
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <main+0x318>)
 8000c60:	f002 fe67 	bl	8003932 <HAL_UART_Transmit>
 8000c64:	e08b      	b.n	8000d7e <main+0x3f6>

			}

			// Set K
			else if(strcmp(argv[0],"SET_K")==0){
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <main+0x360>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fad0 	bl	8000210 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d13c      	bne.n	8000cf0 <main+0x368>
				sprintf(uartTxBuffer,"SET_K=OK");
 8000c76:	491d      	ldr	r1, [pc, #116]	; (8000cec <main+0x364>)
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <main+0x314>)
 8000c7a:	f003 ff45 	bl	8004b08 <siprintf>
				HAL_UART_Transmit(&huart1, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <main+0x314>)
 8000c80:	f7ff fad0 	bl	8000224 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	4903      	ldr	r1, [pc, #12]	; (8000c9c <main+0x314>)
 8000c8e:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <main+0x318>)
 8000c90:	f002 fe4f 	bl	8003932 <HAL_UART_Transmit>
 8000c94:	e073      	b.n	8000d7e <main+0x3f6>
 8000c96:	bf00      	nop
 8000c98:	200002c0 	.word	0x200002c0
 8000c9c:	200002c4 	.word	0x200002c4
 8000ca0:	2000040c 	.word	0x2000040c
 8000ca4:	20000018 	.word	0x20000018
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000240 	.word	0x20000240
 8000cb0:	08006014 	.word	0x08006014
 8000cb4:	200002bc 	.word	0x200002bc
 8000cb8:	2000007c 	.word	0x2000007c
 8000cbc:	08006028 	.word	0x08006028
 8000cc0:	0800602c 	.word	0x0800602c
 8000cc4:	20000094 	.word	0x20000094
 8000cc8:	08006034 	.word	0x08006034
 8000ccc:	0800603c 	.word	0x0800603c
 8000cd0:	0800604c 	.word	0x0800604c
 8000cd4:	200001b2 	.word	0x200001b2
 8000cd8:	20000268 	.word	0x20000268
 8000cdc:	08006054 	.word	0x08006054
 8000ce0:	08006060 	.word	0x08006060
 8000ce4:	08006068 	.word	0x08006068
 8000ce8:	08006074 	.word	0x08006074
 8000cec:	0800607c 	.word	0x0800607c
			}

			// Get coefficent K
			else if(strcmp(argv[0],"GET_K")==0){
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	4928      	ldr	r1, [pc, #160]	; (8000d94 <main+0x40c>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fa8b 	bl	8000210 <strcmp>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10f      	bne.n	8000d20 <main+0x398>
				sprintf(uartTxBuffer,"K = ...");
 8000d00:	4925      	ldr	r1, [pc, #148]	; (8000d98 <main+0x410>)
 8000d02:	4826      	ldr	r0, [pc, #152]	; (8000d9c <main+0x414>)
 8000d04:	f003 ff00 	bl	8004b08 <siprintf>
				HAL_UART_Transmit(&huart1, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000d08:	4824      	ldr	r0, [pc, #144]	; (8000d9c <main+0x414>)
 8000d0a:	f7ff fa8b 	bl	8000224 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <main+0x414>)
 8000d18:	4821      	ldr	r0, [pc, #132]	; (8000da0 <main+0x418>)
 8000d1a:	f002 fe0a 	bl	8003932 <HAL_UART_Transmit>
 8000d1e:	e02e      	b.n	8000d7e <main+0x3f6>
			}

			// Get angle
			else if(strcmp(argv[0],"GET_A")==0){
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	4920      	ldr	r1, [pc, #128]	; (8000da4 <main+0x41c>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa73 	bl	8000210 <strcmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10f      	bne.n	8000d50 <main+0x3c8>
				sprintf(uartTxBuffer,"A = ...°");
 8000d30:	491d      	ldr	r1, [pc, #116]	; (8000da8 <main+0x420>)
 8000d32:	481a      	ldr	r0, [pc, #104]	; (8000d9c <main+0x414>)
 8000d34:	f003 fee8 	bl	8004b08 <siprintf>
				HAL_UART_Transmit(&huart1, uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8000d38:	4818      	ldr	r0, [pc, #96]	; (8000d9c <main+0x414>)
 8000d3a:	f7ff fa73 	bl	8000224 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	4915      	ldr	r1, [pc, #84]	; (8000d9c <main+0x414>)
 8000d48:	4815      	ldr	r0, [pc, #84]	; (8000da0 <main+0x418>)
 8000d4a:	f002 fdf2 	bl	8003932 <HAL_UART_Transmit>
 8000d4e:	e016      	b.n	8000d7e <main+0x3f6>
			}



			//Command not found
			else if(strcmp(argv[0],"get")==0)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	4916      	ldr	r1, [pc, #88]	; (8000dac <main+0x424>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fa5b 	bl	8000210 <strcmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d107      	bne.n	8000d70 <main+0x3e8>
			{
				HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	2214      	movs	r2, #20
 8000d66:	4912      	ldr	r1, [pc, #72]	; (8000db0 <main+0x428>)
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <main+0x418>)
 8000d6a:	f002 fde2 	bl	8003932 <HAL_UART_Transmit>
 8000d6e:	e006      	b.n	8000d7e <main+0x3f6>
			}
			else{
				HAL_UART_Transmit(&huart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	2214      	movs	r2, #20
 8000d76:	490e      	ldr	r1, [pc, #56]	; (8000db0 <main+0x428>)
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <main+0x418>)
 8000d7a:	f002 fdda 	bl	8003932 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2215      	movs	r2, #21
 8000d84:	490b      	ldr	r1, [pc, #44]	; (8000db4 <main+0x42c>)
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <main+0x418>)
 8000d88:	f002 fdd3 	bl	8003932 <HAL_UART_Transmit>
			newCmdReady = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		if(uartRxReceived){
 8000d92:	e653      	b.n	8000a3c <main+0xb4>
 8000d94:	08006088 	.word	0x08006088
 8000d98:	08006090 	.word	0x08006090
 8000d9c:	200002c4 	.word	0x200002c4
 8000da0:	2000040c 	.word	0x2000040c
 8000da4:	08006098 	.word	0x08006098
 8000da8:	080060a0 	.word	0x080060a0
 8000dac:	080060ac 	.word	0x080060ac
 8000db0:	20000080 	.word	0x20000080
 8000db4:	20000000 	.word	0x20000000

08000db8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	; 0x50
 8000dbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2234      	movs	r2, #52	; 0x34
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fe08 	bl	80049dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <SystemClock_Config+0xd4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a29      	ldr	r2, [pc, #164]	; (8000e8c <SystemClock_Config+0xd4>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <SystemClock_Config+0xd4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <SystemClock_Config+0xd8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e04:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <SystemClock_Config+0xd8>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <SystemClock_Config+0xd8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e34:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e36:	2304      	movs	r3, #4
 8000e38:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fa88 	bl	800335c <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000e52:	f000 f835 	bl	8000ec0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 ff28 	bl	8002cc8 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8000e7e:	f000 f81f 	bl	8000ec0 <Error_Handler>
	}
}
 8000e82:	bf00      	nop
 8000e84:	3750      	adds	r7, #80	; 0x50
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_UART_RxCpltCallback+0x20>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4904      	ldr	r1, [pc, #16]	; (8000eb8 <HAL_UART_RxCpltCallback+0x24>)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_UART_RxCpltCallback+0x28>)
 8000ea8:	f002 fdd5 	bl	8003a56 <HAL_UART_Receive_IT>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200002bc 	.word	0x200002bc
 8000eb8:	200002c0 	.word	0x200002c0
 8000ebc:	2000040c 	.word	0x2000040c

08000ec0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f0a:	2007      	movs	r0, #7
 8000f0c:	f000 fcde 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40023800 	.word	0x40023800

08000f1c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f24:	1d39      	adds	r1, r7, #4
 8000f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <__io_putchar+0x20>)
 8000f2e:	f002 fd00 	bl	8003932 <HAL_UART_Transmit>

  return ch;
 8000f32:	687b      	ldr	r3, [r7, #4]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000450 	.word	0x20000450

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 fa4a 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <USART1_IRQHandler+0x10>)
 8000f9a:	f002 fd8d 	bl	8003ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000040c 	.word	0x2000040c

08000fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART2_IRQHandler+0x10>)
 8000fae:	f002 fd83 	bl	8003ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000450 	.word	0x20000450

08000fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_kill>:

int _kill(int pid, int sig)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fd6:	f003 fcd7 	bl	8004988 <__errno>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2216      	movs	r2, #22
 8000fde:	601a      	str	r2, [r3, #0]
	return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_exit>:

void _exit (int status)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffe7 	bl	8000fcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ffe:	e7fe      	b.n	8000ffe <_exit+0x12>

08001000 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e00a      	b.n	8001028 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001012:	f3af 8000 	nop.w
 8001016:	4601      	mov	r1, r0
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	60ba      	str	r2, [r7, #8]
 800101e:	b2ca      	uxtb	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf0      	blt.n	8001012 <_read+0x12>
	}

return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e009      	b.n	8001060 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff61 	bl	8000f1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf1      	blt.n	800104c <_write+0x12>
	}
	return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_close>:

int _close(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	return -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109a:	605a      	str	r2, [r3, #4]
	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_isatty>:

int _isatty(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	return 1;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f003 fc3c 	bl	8004988 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	20000408 	.word	0x20000408
 8001144:	200004a8 	.word	0x200004a8

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_USART1_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART1_UART_Init+0x4c>)
 80011a4:	f002 fb78 	bl	8003898 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f7ff fe87 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000040c 	.word	0x2000040c
 80011bc:	40011000 	.word	0x40011000

080011c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_USART2_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_USART2_UART_Init+0x4c>)
 80011f8:	f002 fb4e 	bl	8003898 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f7ff fe5d 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000450 	.word	0x20000450
 8001210:	40004400 	.word	0x40004400

08001214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a3a      	ldr	r2, [pc, #232]	; (800131c <HAL_UART_MspInit+0x108>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d135      	bne.n	80012a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <HAL_UART_MspInit+0x10c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a38      	ldr	r2, [pc, #224]	; (8001320 <HAL_UART_MspInit+0x10c>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_UART_MspInit+0x10c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_UART_MspInit+0x10c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a31      	ldr	r2, [pc, #196]	; (8001320 <HAL_UART_MspInit+0x10c>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <HAL_UART_MspInit+0x10c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800126e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001280:	2307      	movs	r3, #7
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	4826      	ldr	r0, [pc, #152]	; (8001324 <HAL_UART_MspInit+0x110>)
 800128c:	f000 fbf2 	bl	8001a74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2025      	movs	r0, #37	; 0x25
 8001296:	f000 fb24 	bl	80018e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800129a:	2025      	movs	r0, #37	; 0x25
 800129c:	f000 fb3d 	bl	800191a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a0:	e038      	b.n	8001314 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a20      	ldr	r2, [pc, #128]	; (8001328 <HAL_UART_MspInit+0x114>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d133      	bne.n	8001314 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_UART_MspInit+0x10c>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_UART_MspInit+0x10c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_UART_MspInit+0x10c>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_UART_MspInit+0x10c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <HAL_UART_MspInit+0x10c>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_UART_MspInit+0x10c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012e4:	230c      	movs	r3, #12
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_UART_MspInit+0x110>)
 8001300:	f000 fbb8 	bl	8001a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2026      	movs	r0, #38	; 0x26
 800130a:	f000 faea 	bl	80018e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800130e:	2026      	movs	r0, #38	; 0x26
 8001310:	f000 fb03 	bl	800191a <HAL_NVIC_EnableIRQ>
}
 8001314:	bf00      	nop
 8001316:	3730      	adds	r7, #48	; 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40011000 	.word	0x40011000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40004400 	.word	0x40004400

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001348:	4c0b      	ldr	r4, [pc, #44]	; (8001378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001356:	f7ff fef7 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f003 fb1b 	bl	8004994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff fb13 	bl	8000988 <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001370:	08006220 	.word	0x08006220
  ldr r2, =_sbss
 8001374:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8001378:	200004a8 	.word	0x200004a8

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <HAL_Init+0x40>)
 800138a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_Init+0x40>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x40>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 fa8f 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fd8a 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 faa7 	bl	8001936 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 fa6f 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200001b4 	.word	0x200001b4
 800141c:	200001bc 	.word	0x200001bc
 8001420:	200001b8 	.word	0x200001b8

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200001bc 	.word	0x200001bc
 8001448:	20000494 	.word	0x20000494

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000494 	.word	0x20000494

08001464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff ffee 	bl	800144c <HAL_GetTick>
 8001470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d005      	beq.n	800148a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_Delay+0x44>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148a:	bf00      	nop
 800148c:	f7ff ffde 	bl	800144c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d8f7      	bhi.n	800148c <HAL_Delay+0x28>
  {
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200001bc 	.word	0x200001bc

080014ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0ed      	b.n	800169a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff f8be 	bl	800064c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e0:	f7ff ffb4 	bl	800144c <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e6:	e012      	b.n	800150e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e8:	f7ff ffb0 	bl	800144c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b0a      	cmp	r3, #10
 80014f4:	d90b      	bls.n	800150e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2205      	movs	r2, #5
 8001506:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e0c5      	b.n	800169a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0e5      	beq.n	80014e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0202 	bic.w	r2, r2, #2
 800152a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800152c:	f7ff ff8e 	bl	800144c <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001532:	e012      	b.n	800155a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001534:	f7ff ff8a 	bl	800144c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d90b      	bls.n	800155a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2205      	movs	r2, #5
 8001552:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e09f      	b.n	800169a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e5      	bne.n	8001534 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e1b      	ldrb	r3, [r3, #24]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e007      	b.n	8001592 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7e5b      	ldrb	r3, [r3, #25]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e007      	b.n	80015bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e9b      	ldrb	r3, [r3, #26]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0220 	orr.w	r2, r2, #32
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0220 	bic.w	r2, r2, #32
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7edb      	ldrb	r3, [r3, #27]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0210 	bic.w	r2, r2, #16
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0210 	orr.w	r2, r2, #16
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7f1b      	ldrb	r3, [r3, #28]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0208 	orr.w	r2, r2, #8
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e007      	b.n	800163a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0208 	bic.w	r2, r2, #8
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7f5b      	ldrb	r3, [r3, #29]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0204 	orr.w	r2, r2, #4
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e007      	b.n	8001664 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0204 	bic.w	r2, r2, #4
 8001662:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	ea42 0103 	orr.w	r1, r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d12e      	bne.n	8001714 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016ce:	f7ff febd 	bl	800144c <HAL_GetTick>
 80016d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016d4:	e012      	b.n	80016fc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d6:	f7ff feb9 	bl	800144c <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b0a      	cmp	r3, #10
 80016e2:	d90b      	bls.n	80016fc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2205      	movs	r2, #5
 80016f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e012      	b.n	8001722 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1e5      	bne.n	80016d6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e006      	b.n	8001722 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <__NVIC_EnableIRQ+0x38>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff8e 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff29 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff3e 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff8e 	bl	8001820 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5d 	bl	80017cc <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff31 	bl	8001790 <__NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffa2 	bl	8001888 <SysTick_Config>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fd76 	bl	800144c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d008      	beq.n	8001980 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e052      	b.n	8001a26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0216 	bic.w	r2, r2, #22
 800198e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800199e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d103      	bne.n	80019b0 <HAL_DMA_Abort+0x62>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0208 	bic.w	r2, r2, #8
 80019be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d0:	e013      	b.n	80019fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d2:	f7ff fd3b 	bl	800144c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d90c      	bls.n	80019fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e015      	b.n	8001a26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e4      	bne.n	80019d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	223f      	movs	r2, #63	; 0x3f
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d004      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e00c      	b.n	8001a66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2205      	movs	r2, #5
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e165      	b.n	8001d5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8154 	bne.w	8001d56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d005      	beq.n	8001ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d130      	bne.n	8001b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 0201 	and.w	r2, r3, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d017      	beq.n	8001b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80ae 	beq.w	8001d56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c16:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_GPIO_Init+0x304>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <HAL_GPIO_Init+0x308>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_Init+0x216>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x212>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x20a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x202>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e00c      	b.n	8001c90 <HAL_GPIO_Init+0x21c>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00a      	b.n	8001c90 <HAL_GPIO_Init+0x21c>
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	e008      	b.n	8001c90 <HAL_GPIO_Init+0x21c>
 8001c7e:	2304      	movs	r3, #4
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x21c>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e004      	b.n	8001c90 <HAL_GPIO_Init+0x21c>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e002      	b.n	8001c90 <HAL_GPIO_Init+0x21c>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_GPIO_Init+0x21c>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	f002 0203 	and.w	r2, r2, #3
 8001c96:	0092      	lsls	r2, r2, #2
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca0:	4935      	ldr	r1, [pc, #212]	; (8001d78 <HAL_GPIO_Init+0x304>)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cae:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cd2:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cfc:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d26:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d50:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	f67f ae96 	bls.w	8001a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020c00 	.word	0x40020c00
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40021400 	.word	0x40021400
 8001d94:	40021800 	.word	0x40021800
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e12b      	b.n	8002006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fce0 	bl	8000788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e00:	f001 f854 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8001e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a81      	ldr	r2, [pc, #516]	; (8002010 <HAL_I2C_Init+0x274>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d807      	bhi.n	8001e20 <HAL_I2C_Init+0x84>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a80      	ldr	r2, [pc, #512]	; (8002014 <HAL_I2C_Init+0x278>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	bf94      	ite	ls
 8001e18:	2301      	movls	r3, #1
 8001e1a:	2300      	movhi	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e006      	b.n	8001e2e <HAL_I2C_Init+0x92>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a7d      	ldr	r2, [pc, #500]	; (8002018 <HAL_I2C_Init+0x27c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bf94      	ite	ls
 8001e28:	2301      	movls	r3, #1
 8001e2a:	2300      	movhi	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0e7      	b.n	8002006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a78      	ldr	r2, [pc, #480]	; (800201c <HAL_I2C_Init+0x280>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0c9b      	lsrs	r3, r3, #18
 8001e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a6a      	ldr	r2, [pc, #424]	; (8002010 <HAL_I2C_Init+0x274>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d802      	bhi.n	8001e70 <HAL_I2C_Init+0xd4>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	e009      	b.n	8001e84 <HAL_I2C_Init+0xe8>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_I2C_Init+0x284>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	3301      	adds	r3, #1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	495c      	ldr	r1, [pc, #368]	; (8002010 <HAL_I2C_Init+0x274>)
 8001ea0:	428b      	cmp	r3, r1
 8001ea2:	d819      	bhi.n	8001ed8 <HAL_I2C_Init+0x13c>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e59      	subs	r1, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_I2C_Init+0x138>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e59      	subs	r1, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed2:	e051      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e04f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_I2C_Init+0x168>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e58      	subs	r0, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e012      	b.n	8001f2a <HAL_I2C_Init+0x18e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x196>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e022      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <HAL_I2C_Init+0x1bc>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e58      	subs	r0, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f56:	e00f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1e58      	subs	r0, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	0099      	lsls	r1, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	6809      	ldr	r1, [r1, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6911      	ldr	r1, [r2, #16]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68d2      	ldr	r2, [r2, #12]
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	000186a0 	.word	0x000186a0
 8002014:	001e847f 	.word	0x001e847f
 8002018:	003d08ff 	.word	0x003d08ff
 800201c:	431bde83 	.word	0x431bde83
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	461a      	mov	r2, r3
 8002030:	460b      	mov	r3, r1
 8002032:	817b      	strh	r3, [r7, #10]
 8002034:	4613      	mov	r3, r2
 8002036:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff fa08 	bl	800144c <HAL_GetTick>
 800203c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b20      	cmp	r3, #32
 8002048:	f040 80e0 	bne.w	800220c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2319      	movs	r3, #25
 8002052:	2201      	movs	r2, #1
 8002054:	4970      	ldr	r1, [pc, #448]	; (8002218 <HAL_I2C_Master_Transmit+0x1f4>)
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fc58 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	e0d3      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_I2C_Master_Transmit+0x50>
 8002070:	2302      	movs	r3, #2
 8002072:	e0cc      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d007      	beq.n	800209a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2221      	movs	r2, #33	; 0x21
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2210      	movs	r2, #16
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	893a      	ldrh	r2, [r7, #8]
 80020ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <HAL_I2C_Master_Transmit+0x1f8>)
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020dc:	8979      	ldrh	r1, [r7, #10]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fac2 	bl	800266c <I2C_MasterRequestWrite>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e08d      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002108:	e066      	b.n	80021d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	6a39      	ldr	r1, [r7, #32]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fcd2 	bl	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b04      	cmp	r3, #4
 8002120:	d107      	bne.n	8002132 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002130:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06b      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d11b      	bne.n	80021ac <HAL_I2C_Master_Transmit+0x188>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d017      	beq.n	80021ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	6a39      	ldr	r1, [r7, #32]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fcc2 	bl	8002b3a <I2C_WaitOnBTFFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d107      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e01a      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d194      	bne.n	800210a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	00100002 	.word	0x00100002
 800221c:	ffff0000 	.word	0xffff0000

08002220 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08c      	sub	sp, #48	; 0x30
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	460b      	mov	r3, r1
 800222e:	817b      	strh	r3, [r7, #10]
 8002230:	4613      	mov	r3, r2
 8002232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff f90a 	bl	800144c <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	f040 820b 	bne.w	800265e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2319      	movs	r3, #25
 800224e:	2201      	movs	r2, #1
 8002250:	497c      	ldr	r1, [pc, #496]	; (8002444 <HAL_I2C_Master_Receive+0x224>)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fb5a 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	e1fe      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_I2C_Master_Receive+0x50>
 800226c:	2302      	movs	r3, #2
 800226e:	e1f7      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d007      	beq.n	8002296 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2222      	movs	r2, #34	; 0x22
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2210      	movs	r2, #16
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	893a      	ldrh	r2, [r7, #8]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a5c      	ldr	r2, [pc, #368]	; (8002448 <HAL_I2C_Master_Receive+0x228>)
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fa46 	bl	8002770 <I2C_MasterRequestRead>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1b8      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d113      	bne.n	800231e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e18c      	b.n	8002638 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	2b01      	cmp	r3, #1
 8002324:	d11b      	bne.n	800235e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e16c      	b.n	8002638 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b02      	cmp	r3, #2
 8002364:	d11b      	bne.n	800239e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	e14c      	b.n	8002638 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023c4:	e138      	b.n	8002638 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	f200 80f1 	bhi.w	80025b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d123      	bne.n	8002420 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fbed 	bl	8002bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e139      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800241e:	e10b      	b.n	8002638 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	2b02      	cmp	r3, #2
 8002426:	d14e      	bne.n	80024c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	2200      	movs	r2, #0
 8002430:	4906      	ldr	r1, [pc, #24]	; (800244c <HAL_I2C_Master_Receive+0x22c>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fa6a 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e10e      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
 8002442:	bf00      	nop
 8002444:	00100002 	.word	0x00100002
 8002448:	ffff0000 	.word	0xffff0000
 800244c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024c4:	e0b8      	b.n	8002638 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	2200      	movs	r2, #0
 80024ce:	4966      	ldr	r1, [pc, #408]	; (8002668 <HAL_I2C_Master_Receive+0x448>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fa1b 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0bf      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	2200      	movs	r2, #0
 800252a:	494f      	ldr	r1, [pc, #316]	; (8002668 <HAL_I2C_Master_Receive+0x448>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f9ed 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e091      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b0:	e042      	b.n	8002638 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fb00 	bl	8002bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e04c      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d118      	bne.n	8002638 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	f47f aec2 	bne.w	80023c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e000      	b.n	8002660 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	3728      	adds	r7, #40	; 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	00010004 	.word	0x00010004

0800266c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	460b      	mov	r3, r1
 800267a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d006      	beq.n	8002696 <I2C_MasterRequestWrite+0x2a>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d003      	beq.n	8002696 <I2C_MasterRequestWrite+0x2a>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002694:	d108      	bne.n	80026a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e00b      	b.n	80026c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d107      	bne.n	80026c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f91d 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00d      	beq.n	80026f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d103      	bne.n	80026f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e035      	b.n	8002760 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fc:	d108      	bne.n	8002710 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	e01b      	b.n	8002748 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	11db      	asrs	r3, r3, #7
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0306 	and.w	r3, r3, #6
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f063 030f 	orn	r3, r3, #15
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <I2C_MasterRequestWrite+0xfc>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f943 	bl	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e010      	b.n	8002760 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <I2C_MasterRequestWrite+0x100>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f933 	bl	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	00010008 	.word	0x00010008
 800276c:	00010002 	.word	0x00010002

08002770 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002794:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d006      	beq.n	80027aa <I2C_MasterRequestRead+0x3a>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d003      	beq.n	80027aa <I2C_MasterRequestRead+0x3a>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a8:	d108      	bne.n	80027bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e00b      	b.n	80027d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	2b11      	cmp	r3, #17
 80027c2:	d107      	bne.n	80027d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f893 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d103      	bne.n	8002804 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e079      	b.n	80028fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002810:	d108      	bne.n	8002824 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	611a      	str	r2, [r3, #16]
 8002822:	e05f      	b.n	80028e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002824:	897b      	ldrh	r3, [r7, #10]
 8002826:	11db      	asrs	r3, r3, #7
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 0306 	and.w	r3, r3, #6
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f063 030f 	orn	r3, r3, #15
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4930      	ldr	r1, [pc, #192]	; (8002904 <I2C_MasterRequestRead+0x194>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f8b9 	bl	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e054      	b.n	80028fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4929      	ldr	r1, [pc, #164]	; (8002908 <I2C_MasterRequestRead+0x198>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f8a9 	bl	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e044      	b.n	80028fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002896:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f831 	bl	800290c <I2C_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028be:	d103      	bne.n	80028c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e017      	b.n	80028fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028cc:	897b      	ldrh	r3, [r7, #10]
 80028ce:	11db      	asrs	r3, r3, #7
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f003 0306 	and.w	r3, r3, #6
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f063 030e 	orn	r3, r3, #14
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <I2C_MasterRequestRead+0x198>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f865 	bl	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	00010008 	.word	0x00010008
 8002908:	00010002 	.word	0x00010002

0800290c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291c:	e025      	b.n	800296a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d021      	beq.n	800296a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7fe fd91 	bl	800144c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d116      	bne.n	800296a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e023      	b.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10d      	bne.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	e00c      	b.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	43da      	mvns	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4013      	ands	r3, r2
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d0b6      	beq.n	800291e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c8:	e051      	b.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d8:	d123      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f043 0204 	orr.w	r2, r3, #4
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e046      	b.n	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d021      	beq.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fe fd0f 	bl	800144c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d116      	bne.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e020      	b.n	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10c      	bne.n	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e00b      	b.n	8002aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d18d      	bne.n	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac4:	e02d      	b.n	8002b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8ce 	bl	8002c68 <I2C_IsAcknowledgeFailed>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e02d      	b.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d021      	beq.n	8002b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ade:	f7fe fcb5 	bl	800144c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d302      	bcc.n	8002af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e007      	b.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d1ca      	bne.n	8002ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b46:	e02d      	b.n	8002ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f88d 	bl	8002c68 <I2C_IsAcknowledgeFailed>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e02d      	b.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d021      	beq.n	8002ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b60:	f7fe fc74 	bl	800144c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d302      	bcc.n	8002b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e007      	b.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d1ca      	bne.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bc8:	e042      	b.n	8002c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d119      	bne.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0210 	mvn.w	r2, #16
 8002be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e029      	b.n	8002c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0c:	f7fe fc1e 	bl	800144c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d1b5      	bne.n	8002bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d11b      	bne.n	8002cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0cc      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d90c      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	494d      	ldr	r1, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d044      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d119      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e067      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4934      	ldr	r1, [pc, #208]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fb48 	bl	800144c <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fe fb44 	bl	800144c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d20c      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e032      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4916      	ldr	r1, [pc, #88]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 f855 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe faa8 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023c00 	.word	0x40023c00
 8002e84:	40023800 	.word	0x40023800
 8002e88:	080060b0 	.word	0x080060b0
 8002e8c:	200001b4 	.word	0x200001b4
 8002e90:	200001b8 	.word	0x200001b8

08002e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200001b4 	.word	0x200001b4

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb0:	f7ff fff0 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	0a9b      	lsrs	r3, r3, #10
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	4903      	ldr	r1, [pc, #12]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	080060c0 	.word	0x080060c0

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ed8:	f7ff ffdc 	bl	8002e94 <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0b5b      	lsrs	r3, r3, #13
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4903      	ldr	r1, [pc, #12]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	080060c0 	.word	0x080060c0

08002efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f00:	b0ae      	sub	sp, #184	; 0xb8
 8002f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f22:	4bcb      	ldr	r3, [pc, #812]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	f200 8206 	bhi.w	800333c <HAL_RCC_GetSysClockFreq+0x440>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	0800333d 	.word	0x0800333d
 8002f40:	0800333d 	.word	0x0800333d
 8002f44:	0800333d 	.word	0x0800333d
 8002f48:	08002f75 	.word	0x08002f75
 8002f4c:	0800333d 	.word	0x0800333d
 8002f50:	0800333d 	.word	0x0800333d
 8002f54:	0800333d 	.word	0x0800333d
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	0800333d 	.word	0x0800333d
 8002f60:	0800333d 	.word	0x0800333d
 8002f64:	0800333d 	.word	0x0800333d
 8002f68:	0800316d 	.word	0x0800316d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4bb9      	ldr	r3, [pc, #740]	; (8003254 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002f72:	e1e7      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f74:	4bb8      	ldr	r3, [pc, #736]	; (8003258 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f7a:	e1e3      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f7c:	4bb4      	ldr	r3, [pc, #720]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f88:	4bb1      	ldr	r3, [pc, #708]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d071      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f94:	4bae      	ldr	r3, [pc, #696]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fa0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	f04f 0000 	mov.w	r0, #0
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	0159      	lsls	r1, r3, #5
 8002fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fcc:	0150      	lsls	r0, r2, #5
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	1a51      	subs	r1, r2, r1
 8002fd6:	6439      	str	r1, [r7, #64]	; 0x40
 8002fd8:	4629      	mov	r1, r5
 8002fda:	eb63 0301 	sbc.w	r3, r3, r1
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002fec:	4649      	mov	r1, r9
 8002fee:	018b      	lsls	r3, r1, #6
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	018a      	lsls	r2, r1, #6
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	1a51      	subs	r1, r2, r1
 8002ffe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003000:	4649      	mov	r1, r9
 8003002:	eb63 0301 	sbc.w	r3, r3, r1
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003014:	4649      	mov	r1, r9
 8003016:	00cb      	lsls	r3, r1, #3
 8003018:	4641      	mov	r1, r8
 800301a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800301e:	4641      	mov	r1, r8
 8003020:	00ca      	lsls	r2, r1, #3
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	4603      	mov	r3, r0
 8003028:	4622      	mov	r2, r4
 800302a:	189b      	adds	r3, r3, r2
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
 800302e:	462b      	mov	r3, r5
 8003030:	460a      	mov	r2, r1
 8003032:	eb42 0303 	adc.w	r3, r2, r3
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003044:	4629      	mov	r1, r5
 8003046:	024b      	lsls	r3, r1, #9
 8003048:	4621      	mov	r1, r4
 800304a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800304e:	4621      	mov	r1, r4
 8003050:	024a      	lsls	r2, r1, #9
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003060:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003064:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003068:	f7fd f93a 	bl	80002e0 <__aeabi_uldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4613      	mov	r3, r2
 8003072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003076:	e067      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003078:	4b75      	ldr	r3, [pc, #468]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	2200      	movs	r2, #0
 8003080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003084:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800308c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003090:	67bb      	str	r3, [r7, #120]	; 0x78
 8003092:	2300      	movs	r3, #0
 8003094:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003096:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	0159      	lsls	r1, r3, #5
 80030a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ac:	0150      	lsls	r0, r2, #5
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4621      	mov	r1, r4
 80030b4:	1a51      	subs	r1, r2, r1
 80030b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80030b8:	4629      	mov	r1, r5
 80030ba:	eb63 0301 	sbc.w	r3, r3, r1
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80030cc:	4649      	mov	r1, r9
 80030ce:	018b      	lsls	r3, r1, #6
 80030d0:	4641      	mov	r1, r8
 80030d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d6:	4641      	mov	r1, r8
 80030d8:	018a      	lsls	r2, r1, #6
 80030da:	4641      	mov	r1, r8
 80030dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e0:	4649      	mov	r1, r9
 80030e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030fa:	4692      	mov	sl, r2
 80030fc:	469b      	mov	fp, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	eb1a 0303 	adds.w	r3, sl, r3
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	462b      	mov	r3, r5
 8003108:	eb4b 0303 	adc.w	r3, fp, r3
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800311a:	4629      	mov	r1, r5
 800311c:	028b      	lsls	r3, r1, #10
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003124:	4621      	mov	r1, r4
 8003126:	028a      	lsls	r2, r1, #10
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003130:	2200      	movs	r2, #0
 8003132:	673b      	str	r3, [r7, #112]	; 0x70
 8003134:	677a      	str	r2, [r7, #116]	; 0x74
 8003136:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800313a:	f7fd f8d1 	bl	80002e0 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4613      	mov	r3, r2
 8003144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800315a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800316a:	e0eb      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d06b      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_RCC_GetSysClockFreq+0x354>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	2200      	movs	r2, #0
 800318c:	66bb      	str	r3, [r7, #104]	; 0x68
 800318e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003196:	663b      	str	r3, [r7, #96]	; 0x60
 8003198:	2300      	movs	r3, #0
 800319a:	667b      	str	r3, [r7, #100]	; 0x64
 800319c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80031a0:	4622      	mov	r2, r4
 80031a2:	462b      	mov	r3, r5
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	0159      	lsls	r1, r3, #5
 80031ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b2:	0150      	lsls	r0, r2, #5
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4621      	mov	r1, r4
 80031ba:	1a51      	subs	r1, r2, r1
 80031bc:	61b9      	str	r1, [r7, #24]
 80031be:	4629      	mov	r1, r5
 80031c0:	eb63 0301 	sbc.w	r3, r3, r1
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031d2:	4659      	mov	r1, fp
 80031d4:	018b      	lsls	r3, r1, #6
 80031d6:	4651      	mov	r1, sl
 80031d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031dc:	4651      	mov	r1, sl
 80031de:	018a      	lsls	r2, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ebb2 0801 	subs.w	r8, r2, r1
 80031e6:	4659      	mov	r1, fp
 80031e8:	eb63 0901 	sbc.w	r9, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003200:	4690      	mov	r8, r2
 8003202:	4699      	mov	r9, r3
 8003204:	4623      	mov	r3, r4
 8003206:	eb18 0303 	adds.w	r3, r8, r3
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	462b      	mov	r3, r5
 800320e:	eb49 0303 	adc.w	r3, r9, r3
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003220:	4629      	mov	r1, r5
 8003222:	024b      	lsls	r3, r1, #9
 8003224:	4621      	mov	r1, r4
 8003226:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800322a:	4621      	mov	r1, r4
 800322c:	024a      	lsls	r2, r1, #9
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003236:	2200      	movs	r2, #0
 8003238:	65bb      	str	r3, [r7, #88]	; 0x58
 800323a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800323c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003240:	f7fd f84e 	bl	80002e0 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800324e:	e065      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x420>
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400
 8003258:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325c:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <HAL_RCC_GetSysClockFreq+0x458>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	2200      	movs	r2, #0
 8003264:	4618      	mov	r0, r3
 8003266:	4611      	mov	r1, r2
 8003268:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800326c:	653b      	str	r3, [r7, #80]	; 0x50
 800326e:	2300      	movs	r3, #0
 8003270:	657b      	str	r3, [r7, #84]	; 0x54
 8003272:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003276:	4642      	mov	r2, r8
 8003278:	464b      	mov	r3, r9
 800327a:	f04f 0000 	mov.w	r0, #0
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	0159      	lsls	r1, r3, #5
 8003284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003288:	0150      	lsls	r0, r2, #5
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4641      	mov	r1, r8
 8003290:	1a51      	subs	r1, r2, r1
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	4649      	mov	r1, r9
 8003296:	eb63 0301 	sbc.w	r3, r3, r1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032a8:	4659      	mov	r1, fp
 80032aa:	018b      	lsls	r3, r1, #6
 80032ac:	4651      	mov	r1, sl
 80032ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032b2:	4651      	mov	r1, sl
 80032b4:	018a      	lsls	r2, r1, #6
 80032b6:	4651      	mov	r1, sl
 80032b8:	1a54      	subs	r4, r2, r1
 80032ba:	4659      	mov	r1, fp
 80032bc:	eb63 0501 	sbc.w	r5, r3, r1
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	00eb      	lsls	r3, r5, #3
 80032ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ce:	00e2      	lsls	r2, r4, #3
 80032d0:	4614      	mov	r4, r2
 80032d2:	461d      	mov	r5, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	18e3      	adds	r3, r4, r3
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	464b      	mov	r3, r9
 80032dc:	eb45 0303 	adc.w	r3, r5, r3
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ee:	4629      	mov	r1, r5
 80032f0:	028b      	lsls	r3, r1, #10
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f8:	4621      	mov	r1, r4
 80032fa:	028a      	lsls	r2, r1, #10
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003304:	2200      	movs	r2, #0
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
 8003308:	64fa      	str	r2, [r7, #76]	; 0x4c
 800330a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800330e:	f7fc ffe7 	bl	80002e0 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4613      	mov	r3, r2
 8003318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCC_GetSysClockFreq+0x458>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0f1b      	lsrs	r3, r3, #28
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800332a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800332e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800333a:	e003      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_GetSysClockFreq+0x45c>)
 800333e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003342:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003348:	4618      	mov	r0, r3
 800334a:	37b8      	adds	r7, #184	; 0xb8
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400

0800335c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e28d      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8083 	beq.w	8003482 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800337c:	4b94      	ldr	r3, [pc, #592]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b04      	cmp	r3, #4
 8003386:	d019      	beq.n	80033bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003388:	4b91      	ldr	r3, [pc, #580]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003390:	2b08      	cmp	r3, #8
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003394:	4b8e      	ldr	r3, [pc, #568]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a0:	d00c      	beq.n	80033bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b8b      	ldr	r3, [pc, #556]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d112      	bne.n	80033d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	4b84      	ldr	r3, [pc, #528]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05b      	beq.n	8003480 <HAL_RCC_OscConfig+0x124>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d157      	bne.n	8003480 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e25a      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d106      	bne.n	80033ec <HAL_RCC_OscConfig+0x90>
 80033de:	4b7c      	ldr	r3, [pc, #496]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7b      	ldr	r2, [pc, #492]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xcc>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0xb4>
 80033f6:	4b76      	ldr	r3, [pc, #472]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a75      	ldr	r2, [pc, #468]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b73      	ldr	r3, [pc, #460]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a72      	ldr	r2, [pc, #456]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xcc>
 8003410:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a6b      	ldr	r2, [pc, #428]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe f80c 	bl	800144c <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe f808 	bl	800144c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e21f      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xdc>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd fff8 	bl	800144c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7fd fff4 	bl	800144c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e20b      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x104>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d06f      	beq.n	800356e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800348e:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d017      	beq.n	80034ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800349a:	4b4d      	ldr	r3, [pc, #308]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d105      	bne.n	80034b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034a6:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d11c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034be:	4b44      	ldr	r3, [pc, #272]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x186>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e1d3      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4937      	ldr	r1, [pc, #220]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	e03a      	b.n	800356e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <HAL_RCC_OscConfig+0x278>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fd ffa1 	bl	800144c <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350e:	f7fd ff9d 	bl	800144c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1b4      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4925      	ldr	r1, [pc, #148]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_OscConfig+0x278>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fd ff80 	bl	800144c <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003550:	f7fd ff7c 	bl	800144c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e193      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d036      	beq.n	80035e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_RCC_OscConfig+0x27c>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd ff60 	bl	800144c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd ff5c 	bl	800144c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e173      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 80035a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x234>
 80035ae:	e01b      	b.n	80035e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_OscConfig+0x27c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fd ff49 	bl	800144c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	e00e      	b.n	80035dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035be:	f7fd ff45 	bl	800144c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d907      	bls.n	80035dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e15c      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
 80035d0:	40023800 	.word	0x40023800
 80035d4:	42470000 	.word	0x42470000
 80035d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b8a      	ldr	r3, [pc, #552]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ea      	bne.n	80035be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8097 	beq.w	8003724 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b83      	ldr	r3, [pc, #524]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	4a7e      	ldr	r2, [pc, #504]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	6413      	str	r3, [r2, #64]	; 0x40
 8003616:	4b7c      	ldr	r3, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b79      	ldr	r3, [pc, #484]	; (800380c <HAL_RCC_OscConfig+0x4b0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0x4b0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a75      	ldr	r2, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x4b0>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fd ff05 	bl	800144c <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fd ff01 	bl	800144c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e118      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b6c      	ldr	r3, [pc, #432]	; (800380c <HAL_RCC_OscConfig+0x4b0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x31e>
 800366c:	4b66      	ldr	r3, [pc, #408]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a65      	ldr	r2, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
 8003678:	e01c      	b.n	80036b4 <HAL_RCC_OscConfig+0x358>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b05      	cmp	r3, #5
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x340>
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a60      	ldr	r2, [pc, #384]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
 800368e:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6713      	str	r3, [r2, #112]	; 0x70
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0x358>
 800369c:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	4a59      	ldr	r2, [pc, #356]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6713      	str	r3, [r2, #112]	; 0x70
 80036a8:	4b57      	ldr	r3, [pc, #348]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a56      	ldr	r2, [pc, #344]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80036ae:	f023 0304 	bic.w	r3, r3, #4
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fd fec6 	bl	800144c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fd fec2 	bl	800144c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0d7      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	4b4b      	ldr	r3, [pc, #300]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ee      	beq.n	80036c4 <HAL_RCC_OscConfig+0x368>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd feb0 	bl	800144c <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fd feac 	bl	800144c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0c1      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	4b40      	ldr	r3, [pc, #256]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ee      	bne.n	80036f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	4a3a      	ldr	r2, [pc, #232]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003722:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80ad 	beq.w	8003888 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b08      	cmp	r3, #8
 8003738:	d060      	beq.n	80037fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d145      	bne.n	80037ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b33      	ldr	r3, [pc, #204]	; (8003810 <HAL_RCC_OscConfig+0x4b4>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fd fe80 	bl	800144c <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003750:	f7fd fe7c 	bl	800144c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e093      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	019b      	lsls	r3, r3, #6
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	3b01      	subs	r3, #1
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	071b      	lsls	r3, r3, #28
 800379a:	491b      	ldr	r1, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x4b4>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd fe51 	bl	800144c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fd fe4d 	bl	800144c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e064      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x452>
 80037cc:	e05c      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_OscConfig+0x4b4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd fe3a 	bl	800144c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fd fe36 	bl	800144c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e04d      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x480>
 80037fa:	e045      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e040      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000
 8003810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_RCC_OscConfig+0x538>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d030      	beq.n	8003884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d129      	bne.n	8003884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d122      	bne.n	8003884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800384a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384c:	4293      	cmp	r3, r2
 800384e:	d119      	bne.n	8003884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	3b01      	subs	r3, #1
 800385e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d10f      	bne.n	8003884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e03f      	b.n	800392a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fca8 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fddf 	bl	80044a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b08a      	sub	sp, #40	; 0x28
 8003936:	af02      	add	r7, sp, #8
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d17c      	bne.n	8003a4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_Transmit+0x2c>
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e075      	b.n	8003a4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_UART_Transmit+0x3e>
 800396c:	2302      	movs	r3, #2
 800396e:	e06e      	b.n	8003a4e <HAL_UART_Transmit+0x11c>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2221      	movs	r2, #33	; 0x21
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003986:	f7fd fd61 	bl	800144c <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d108      	bne.n	80039b4 <HAL_UART_Transmit+0x82>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e003      	b.n	80039bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039c4:	e02a      	b.n	8003a1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fb1f 	bl	8004014 <UART_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e036      	b.n	8003a4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3302      	adds	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e007      	b.n	8003a0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1cf      	bne.n	80039c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2140      	movs	r1, #64	; 0x40
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 faef 	bl	8004014 <UART_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e006      	b.n	8003a4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e000      	b.n	8003a4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a4c:	2302      	movs	r3, #2
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	4613      	mov	r3, r2
 8003a62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d11d      	bne.n	8003aac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_UART_Receive_IT+0x26>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e016      	b.n	8003aae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Receive_IT+0x38>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e00f      	b.n	8003aae <HAL_UART_Receive_IT+0x58>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fb24 	bl	80040f0 <UART_Start_Receive_IT>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	e000      	b.n	8003aae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b0ba      	sub	sp, #232	; 0xe8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_UART_IRQHandler+0x66>
 8003b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fc07 	bl	800432a <UART_Receive_IT>
      return;
 8003b1c:	e256      	b.n	8003fcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80de 	beq.w	8003ce4 <HAL_UART_IRQHandler+0x22c>
 8003b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80d1 	beq.w	8003ce4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_UART_IRQHandler+0xae>
 8003b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_UART_IRQHandler+0xd2>
 8003b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f043 0202 	orr.w	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_UART_IRQHandler+0xf6>
 8003b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0204 	orr.w	r2, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d011      	beq.n	8003bde <HAL_UART_IRQHandler+0x126>
 8003bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0208 	orr.w	r2, r3, #8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 81ed 	beq.w	8003fc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_UART_IRQHandler+0x14e>
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fb92 	bl	800432a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <HAL_UART_IRQHandler+0x17a>
 8003c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d04f      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa9a 	bl	800416c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d141      	bne.n	8003cca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1d9      	bne.n	8003c46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d013      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	4a7d      	ldr	r2, [pc, #500]	; (8003e94 <HAL_UART_IRQHandler+0x3dc>)
 8003ca0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fd fec1 	bl	8001a2e <HAL_DMA_Abort_IT>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d016      	beq.n	8003ce0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	e00e      	b.n	8003ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f990 	bl	8003fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	e00a      	b.n	8003ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f98c 	bl	8003fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	e006      	b.n	8003ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f988 	bl	8003fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cde:	e170      	b.n	8003fc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	bf00      	nop
    return;
 8003ce2:	e16e      	b.n	8003fc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 814a 	bne.w	8003f82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8143 	beq.w	8003f82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 813c 	beq.w	8003f82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	f040 80b4 	bne.w	8003e98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8140 	beq.w	8003fc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	f080 8139 	bcs.w	8003fc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d66:	f000 8088 	beq.w	8003e7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1d9      	bne.n	8003d6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e1      	bne.n	8003db6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e3      	bne.n	8003df2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4a:	f023 0310 	bic.w	r3, r3, #16
 8003e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e3      	bne.n	8003e38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fd fd6a 	bl	800194e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f8b6 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e90:	e099      	b.n	8003fc6 <HAL_UART_IRQHandler+0x50e>
 8003e92:	bf00      	nop
 8003e94:	08004233 	.word	0x08004233
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 808b 	beq.w	8003fca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8086 	beq.w	8003fca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ee2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ee4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e3      	bne.n	8003ebe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	623b      	str	r3, [r7, #32]
   return(result);
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f1a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0310 	bic.w	r3, r3, #16
 8003f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f60:	61fa      	str	r2, [r7, #28]
 8003f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	69b9      	ldr	r1, [r7, #24]
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f83e 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f80:	e023      	b.n	8003fca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x4ea>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f95d 	bl	800425a <UART_Transmit_IT>
    return;
 8003fa0:	e014      	b.n	8003fcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00e      	beq.n	8003fcc <HAL_UART_IRQHandler+0x514>
 8003fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f99d 	bl	80042fa <UART_EndTransmit_IT>
    return;
 8003fc0:	e004      	b.n	8003fcc <HAL_UART_IRQHandler+0x514>
    return;
 8003fc2:	bf00      	nop
 8003fc4:	e002      	b.n	8003fcc <HAL_UART_IRQHandler+0x514>
      return;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <HAL_UART_IRQHandler+0x514>
      return;
 8003fca:	bf00      	nop
  }
}
 8003fcc:	37e8      	adds	r7, #232	; 0xe8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop

08003fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b090      	sub	sp, #64	; 0x40
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004024:	e050      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d04c      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800402e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x30>
 8004034:	f7fd fa0a 	bl	800144c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004040:	429a      	cmp	r2, r3
 8004042:	d241      	bcs.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004064:	637a      	str	r2, [r7, #52]	; 0x34
 8004066:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800406a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e5      	bne.n	8004044 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3314      	adds	r3, #20
 800407e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	613b      	str	r3, [r7, #16]
   return(result);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f023 0301 	bic.w	r3, r3, #1
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004098:	623a      	str	r2, [r7, #32]
 800409a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	6a3a      	ldr	r2, [r7, #32]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e00f      	b.n	80040e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d09f      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3740      	adds	r7, #64	; 0x40
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2222      	movs	r2, #34	; 0x22
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0220 	orr.w	r2, r2, #32
 800415c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b095      	sub	sp, #84	; 0x54
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004194:	643a      	str	r2, [r7, #64]	; 0x40
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800419a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3314      	adds	r3, #20
 80041c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d119      	bne.n	8004218 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f023 0310 	bic.w	r3, r3, #16
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004204:	61ba      	str	r2, [r7, #24]
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6979      	ldr	r1, [r7, #20]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	613b      	str	r3, [r7, #16]
   return(result);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004226:	bf00      	nop
 8004228:	3754      	adds	r7, #84	; 0x54
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fecb 	bl	8003fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b21      	cmp	r3, #33	; 0x21
 800426c:	d13e      	bne.n	80042ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d114      	bne.n	80042a2 <UART_Transmit_IT+0x48>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d110      	bne.n	80042a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004294:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	1c9a      	adds	r2, r3, #2
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]
 80042a0:	e008      	b.n	80042b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	1c59      	adds	r1, r3, #1
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6211      	str	r1, [r2, #32]
 80042ac:	781a      	ldrb	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10f      	bne.n	80042e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004310:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fe5a 	bl	8003fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b08c      	sub	sp, #48	; 0x30
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b22      	cmp	r3, #34	; 0x22
 800433c:	f040 80ab 	bne.w	8004496 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004348:	d117      	bne.n	800437a <UART_Receive_IT+0x50>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004368:	b29a      	uxth	r2, r3
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
 8004378:	e026      	b.n	80043c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d007      	beq.n	800439e <UART_Receive_IT+0x74>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <UART_Receive_IT+0x82>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e008      	b.n	80043be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4619      	mov	r1, r3
 80043d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d15a      	bne.n	8004492 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0220 	bic.w	r2, r2, #32
 80043ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d135      	bne.n	8004488 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	623a      	str	r2, [r7, #32]
 8004444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69f9      	ldr	r1, [r7, #28]
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d10a      	bne.n	800447a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fdbb 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
 8004486:	e002      	b.n	800448e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fc fd03 	bl	8000e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e002      	b.n	8004498 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3730      	adds	r7, #48	; 0x30
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b0c0      	sub	sp, #256	; 0x100
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	ea40 0301 	orr.w	r3, r0, r1
 80044c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f8:	f021 010c 	bic.w	r1, r1, #12
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004506:	430b      	orrs	r3, r1
 8004508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451a:	6999      	ldr	r1, [r3, #24]
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	ea40 0301 	orr.w	r3, r0, r1
 8004526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8f      	ldr	r3, [pc, #572]	; (800476c <UART_SetConfig+0x2cc>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d005      	beq.n	8004540 <UART_SetConfig+0xa0>
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b8d      	ldr	r3, [pc, #564]	; (8004770 <UART_SetConfig+0x2d0>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d104      	bne.n	800454a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7fe fcc8 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 8004544:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004548:	e003      	b.n	8004552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454a:	f7fe fcaf 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 800454e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	f040 810c 	bne.w	8004778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800456a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800456e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	1891      	adds	r1, r2, r2
 8004578:	65b9      	str	r1, [r7, #88]	; 0x58
 800457a:	415b      	adcs	r3, r3
 800457c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800457e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004582:	4621      	mov	r1, r4
 8004584:	eb12 0801 	adds.w	r8, r2, r1
 8004588:	4629      	mov	r1, r5
 800458a:	eb43 0901 	adc.w	r9, r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800459a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800459e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045a2:	4690      	mov	r8, r2
 80045a4:	4699      	mov	r9, r3
 80045a6:	4623      	mov	r3, r4
 80045a8:	eb18 0303 	adds.w	r3, r8, r3
 80045ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045b0:	462b      	mov	r3, r5
 80045b2:	eb49 0303 	adc.w	r3, r9, r3
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045ce:	460b      	mov	r3, r1
 80045d0:	18db      	adds	r3, r3, r3
 80045d2:	653b      	str	r3, [r7, #80]	; 0x50
 80045d4:	4613      	mov	r3, r2
 80045d6:	eb42 0303 	adc.w	r3, r2, r3
 80045da:	657b      	str	r3, [r7, #84]	; 0x54
 80045dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045e4:	f7fb fe7c 	bl	80002e0 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b61      	ldr	r3, [pc, #388]	; (8004774 <UART_SetConfig+0x2d4>)
 80045ee:	fba3 2302 	umull	r2, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	011c      	lsls	r4, r3, #4
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004600:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004610:	415b      	adcs	r3, r3
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004618:	4641      	mov	r1, r8
 800461a:	eb12 0a01 	adds.w	sl, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb43 0b01 	adc.w	fp, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004638:	4692      	mov	sl, r2
 800463a:	469b      	mov	fp, r3
 800463c:	4643      	mov	r3, r8
 800463e:	eb1a 0303 	adds.w	r3, sl, r3
 8004642:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004646:	464b      	mov	r3, r9
 8004648:	eb4b 0303 	adc.w	r3, fp, r3
 800464c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800465c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004664:	460b      	mov	r3, r1
 8004666:	18db      	adds	r3, r3, r3
 8004668:	643b      	str	r3, [r7, #64]	; 0x40
 800466a:	4613      	mov	r3, r2
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	647b      	str	r3, [r7, #68]	; 0x44
 8004672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800467a:	f7fb fe31 	bl	80002e0 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4611      	mov	r1, r2
 8004684:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <UART_SetConfig+0x2d4>)
 8004686:	fba3 2301 	umull	r2, r3, r3, r1
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2264      	movs	r2, #100	; 0x64
 800468e:	fb02 f303 	mul.w	r3, r2, r3
 8004692:	1acb      	subs	r3, r1, r3
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800469a:	4b36      	ldr	r3, [pc, #216]	; (8004774 <UART_SetConfig+0x2d4>)
 800469c:	fba3 2302 	umull	r2, r3, r3, r2
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a8:	441c      	add	r4, r3
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80046c4:	415b      	adcs	r3, r3
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6339      	str	r1, [r7, #48]	; 0x30
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004718:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800471c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004720:	460b      	mov	r3, r1
 8004722:	18db      	adds	r3, r3, r3
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	4613      	mov	r3, r2
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004736:	f7fb fdd3 	bl	80002e0 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <UART_SetConfig+0x2d4>)
 8004740:	fba3 1302 	umull	r1, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	2164      	movs	r1, #100	; 0x64
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	3332      	adds	r3, #50	; 0x32
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <UART_SetConfig+0x2d4>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	f003 0207 	and.w	r2, r3, #7
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4422      	add	r2, r4
 8004766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004768:	e105      	b.n	8004976 <UART_SetConfig+0x4d6>
 800476a:	bf00      	nop
 800476c:	40011000 	.word	0x40011000
 8004770:	40011400 	.word	0x40011400
 8004774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477c:	2200      	movs	r2, #0
 800477e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004782:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800478a:	4642      	mov	r2, r8
 800478c:	464b      	mov	r3, r9
 800478e:	1891      	adds	r1, r2, r2
 8004790:	6239      	str	r1, [r7, #32]
 8004792:	415b      	adcs	r3, r3
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800479a:	4641      	mov	r1, r8
 800479c:	1854      	adds	r4, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0501 	adc.w	r5, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	00eb      	lsls	r3, r5, #3
 80047ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b2:	00e2      	lsls	r2, r4, #3
 80047b4:	4614      	mov	r4, r2
 80047b6:	461d      	mov	r5, r3
 80047b8:	4643      	mov	r3, r8
 80047ba:	18e3      	adds	r3, r4, r3
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047c0:	464b      	mov	r3, r9
 80047c2:	eb45 0303 	adc.w	r3, r5, r3
 80047c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047e6:	4629      	mov	r1, r5
 80047e8:	008b      	lsls	r3, r1, #2
 80047ea:	4621      	mov	r1, r4
 80047ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f0:	4621      	mov	r1, r4
 80047f2:	008a      	lsls	r2, r1, #2
 80047f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047f8:	f7fb fd72 	bl	80002e0 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4b60      	ldr	r3, [pc, #384]	; (8004984 <UART_SetConfig+0x4e4>)
 8004802:	fba3 2302 	umull	r2, r3, r3, r2
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	011c      	lsls	r4, r3, #4
 800480a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	1891      	adds	r1, r2, r2
 8004822:	61b9      	str	r1, [r7, #24]
 8004824:	415b      	adcs	r3, r3
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482c:	4641      	mov	r1, r8
 800482e:	1851      	adds	r1, r2, r1
 8004830:	6139      	str	r1, [r7, #16]
 8004832:	4649      	mov	r1, r9
 8004834:	414b      	adcs	r3, r1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004844:	4659      	mov	r1, fp
 8004846:	00cb      	lsls	r3, r1, #3
 8004848:	4651      	mov	r1, sl
 800484a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800484e:	4651      	mov	r1, sl
 8004850:	00ca      	lsls	r2, r1, #3
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	4603      	mov	r3, r0
 8004858:	4642      	mov	r2, r8
 800485a:	189b      	adds	r3, r3, r2
 800485c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004860:	464b      	mov	r3, r9
 8004862:	460a      	mov	r2, r1
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	67bb      	str	r3, [r7, #120]	; 0x78
 8004876:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004884:	4649      	mov	r1, r9
 8004886:	008b      	lsls	r3, r1, #2
 8004888:	4641      	mov	r1, r8
 800488a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488e:	4641      	mov	r1, r8
 8004890:	008a      	lsls	r2, r1, #2
 8004892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004896:	f7fb fd23 	bl	80002e0 <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <UART_SetConfig+0x4e4>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	; 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	3332      	adds	r3, #50	; 0x32
 80048b2:	4a34      	ldr	r2, [pc, #208]	; (8004984 <UART_SetConfig+0x4e4>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048be:	441c      	add	r4, r3
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	673b      	str	r3, [r7, #112]	; 0x70
 80048c8:	677a      	str	r2, [r7, #116]	; 0x74
 80048ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048ce:	4642      	mov	r2, r8
 80048d0:	464b      	mov	r3, r9
 80048d2:	1891      	adds	r1, r2, r2
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	415b      	adcs	r3, r3
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048de:	4641      	mov	r1, r8
 80048e0:	1851      	adds	r1, r2, r1
 80048e2:	6039      	str	r1, [r7, #0]
 80048e4:	4649      	mov	r1, r9
 80048e6:	414b      	adcs	r3, r1
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048f6:	4659      	mov	r1, fp
 80048f8:	00cb      	lsls	r3, r1, #3
 80048fa:	4651      	mov	r1, sl
 80048fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004900:	4651      	mov	r1, sl
 8004902:	00ca      	lsls	r2, r1, #3
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	4603      	mov	r3, r0
 800490a:	4642      	mov	r2, r8
 800490c:	189b      	adds	r3, r3, r2
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004910:	464b      	mov	r3, r9
 8004912:	460a      	mov	r2, r1
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	66fb      	str	r3, [r7, #108]	; 0x6c
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	663b      	str	r3, [r7, #96]	; 0x60
 8004924:	667a      	str	r2, [r7, #100]	; 0x64
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004932:	4649      	mov	r1, r9
 8004934:	008b      	lsls	r3, r1, #2
 8004936:	4641      	mov	r1, r8
 8004938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493c:	4641      	mov	r1, r8
 800493e:	008a      	lsls	r2, r1, #2
 8004940:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004944:	f7fb fccc 	bl	80002e0 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <UART_SetConfig+0x4e4>)
 800494e:	fba3 1302 	umull	r1, r3, r3, r2
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2164      	movs	r1, #100	; 0x64
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	3332      	adds	r3, #50	; 0x32
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <UART_SetConfig+0x4e4>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4422      	add	r2, r4
 8004974:	609a      	str	r2, [r3, #8]
}
 8004976:	bf00      	nop
 8004978:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	51eb851f 	.word	0x51eb851f

08004988 <__errno>:
 8004988:	4b01      	ldr	r3, [pc, #4]	; (8004990 <__errno+0x8>)
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	200001c0 	.word	0x200001c0

08004994 <__libc_init_array>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4d0d      	ldr	r5, [pc, #52]	; (80049cc <__libc_init_array+0x38>)
 8004998:	4c0d      	ldr	r4, [pc, #52]	; (80049d0 <__libc_init_array+0x3c>)
 800499a:	1b64      	subs	r4, r4, r5
 800499c:	10a4      	asrs	r4, r4, #2
 800499e:	2600      	movs	r6, #0
 80049a0:	42a6      	cmp	r6, r4
 80049a2:	d109      	bne.n	80049b8 <__libc_init_array+0x24>
 80049a4:	4d0b      	ldr	r5, [pc, #44]	; (80049d4 <__libc_init_array+0x40>)
 80049a6:	4c0c      	ldr	r4, [pc, #48]	; (80049d8 <__libc_init_array+0x44>)
 80049a8:	f001 fae0 	bl	8005f6c <_init>
 80049ac:	1b64      	subs	r4, r4, r5
 80049ae:	10a4      	asrs	r4, r4, #2
 80049b0:	2600      	movs	r6, #0
 80049b2:	42a6      	cmp	r6, r4
 80049b4:	d105      	bne.n	80049c2 <__libc_init_array+0x2e>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049bc:	4798      	blx	r3
 80049be:	3601      	adds	r6, #1
 80049c0:	e7ee      	b.n	80049a0 <__libc_init_array+0xc>
 80049c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c6:	4798      	blx	r3
 80049c8:	3601      	adds	r6, #1
 80049ca:	e7f2      	b.n	80049b2 <__libc_init_array+0x1e>
 80049cc:	08006218 	.word	0x08006218
 80049d0:	08006218 	.word	0x08006218
 80049d4:	08006218 	.word	0x08006218
 80049d8:	0800621c 	.word	0x0800621c

080049dc <memset>:
 80049dc:	4402      	add	r2, r0
 80049de:	4603      	mov	r3, r0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <iprintf>:
 80049ec:	b40f      	push	{r0, r1, r2, r3}
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <iprintf+0x2c>)
 80049f0:	b513      	push	{r0, r1, r4, lr}
 80049f2:	681c      	ldr	r4, [r3, #0]
 80049f4:	b124      	cbz	r4, 8004a00 <iprintf+0x14>
 80049f6:	69a3      	ldr	r3, [r4, #24]
 80049f8:	b913      	cbnz	r3, 8004a00 <iprintf+0x14>
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 faf8 	bl	8004ff0 <__sinit>
 8004a00:	ab05      	add	r3, sp, #20
 8004a02:	9a04      	ldr	r2, [sp, #16]
 8004a04:	68a1      	ldr	r1, [r4, #8]
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fe77 	bl	80056fc <_vfiprintf_r>
 8004a0e:	b002      	add	sp, #8
 8004a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a14:	b004      	add	sp, #16
 8004a16:	4770      	bx	lr
 8004a18:	200001c0 	.word	0x200001c0

08004a1c <_puts_r>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	460e      	mov	r6, r1
 8004a20:	4605      	mov	r5, r0
 8004a22:	b118      	cbz	r0, 8004a2c <_puts_r+0x10>
 8004a24:	6983      	ldr	r3, [r0, #24]
 8004a26:	b90b      	cbnz	r3, 8004a2c <_puts_r+0x10>
 8004a28:	f000 fae2 	bl	8004ff0 <__sinit>
 8004a2c:	69ab      	ldr	r3, [r5, #24]
 8004a2e:	68ac      	ldr	r4, [r5, #8]
 8004a30:	b913      	cbnz	r3, 8004a38 <_puts_r+0x1c>
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 fadc 	bl	8004ff0 <__sinit>
 8004a38:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <_puts_r+0xd0>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	d120      	bne.n	8004a80 <_puts_r+0x64>
 8004a3e:	686c      	ldr	r4, [r5, #4]
 8004a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a42:	07db      	lsls	r3, r3, #31
 8004a44:	d405      	bmi.n	8004a52 <_puts_r+0x36>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	0598      	lsls	r0, r3, #22
 8004a4a:	d402      	bmi.n	8004a52 <_puts_r+0x36>
 8004a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4e:	f000 fb7f 	bl	8005150 <__retarget_lock_acquire_recursive>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	d51d      	bpl.n	8004a94 <_puts_r+0x78>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	b1db      	cbz	r3, 8004a94 <_puts_r+0x78>
 8004a5c:	3e01      	subs	r6, #1
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a64:	3b01      	subs	r3, #1
 8004a66:	60a3      	str	r3, [r4, #8]
 8004a68:	bb39      	cbnz	r1, 8004aba <_puts_r+0x9e>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da38      	bge.n	8004ae0 <_puts_r+0xc4>
 8004a6e:	4622      	mov	r2, r4
 8004a70:	210a      	movs	r1, #10
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 f8c4 	bl	8004c00 <__swbuf_r>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d011      	beq.n	8004aa0 <_puts_r+0x84>
 8004a7c:	250a      	movs	r5, #10
 8004a7e:	e011      	b.n	8004aa4 <_puts_r+0x88>
 8004a80:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <_puts_r+0xd4>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	d101      	bne.n	8004a8a <_puts_r+0x6e>
 8004a86:	68ac      	ldr	r4, [r5, #8]
 8004a88:	e7da      	b.n	8004a40 <_puts_r+0x24>
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <_puts_r+0xd8>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	bf08      	it	eq
 8004a90:	68ec      	ldreq	r4, [r5, #12]
 8004a92:	e7d5      	b.n	8004a40 <_puts_r+0x24>
 8004a94:	4621      	mov	r1, r4
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 f904 	bl	8004ca4 <__swsetup_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d0dd      	beq.n	8004a5c <_puts_r+0x40>
 8004aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8004aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aa6:	07da      	lsls	r2, r3, #31
 8004aa8:	d405      	bmi.n	8004ab6 <_puts_r+0x9a>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	059b      	lsls	r3, r3, #22
 8004aae:	d402      	bmi.n	8004ab6 <_puts_r+0x9a>
 8004ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ab2:	f000 fb4e 	bl	8005152 <__retarget_lock_release_recursive>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da04      	bge.n	8004ac8 <_puts_r+0xac>
 8004abe:	69a2      	ldr	r2, [r4, #24]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	dc06      	bgt.n	8004ad2 <_puts_r+0xb6>
 8004ac4:	290a      	cmp	r1, #10
 8004ac6:	d004      	beq.n	8004ad2 <_puts_r+0xb6>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	6022      	str	r2, [r4, #0]
 8004ace:	7019      	strb	r1, [r3, #0]
 8004ad0:	e7c5      	b.n	8004a5e <_puts_r+0x42>
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 f893 	bl	8004c00 <__swbuf_r>
 8004ada:	3001      	adds	r0, #1
 8004adc:	d1bf      	bne.n	8004a5e <_puts_r+0x42>
 8004ade:	e7df      	b.n	8004aa0 <_puts_r+0x84>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	250a      	movs	r5, #10
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	701d      	strb	r5, [r3, #0]
 8004aea:	e7db      	b.n	8004aa4 <_puts_r+0x88>
 8004aec:	0800619c 	.word	0x0800619c
 8004af0:	080061bc 	.word	0x080061bc
 8004af4:	0800617c 	.word	0x0800617c

08004af8 <puts>:
 8004af8:	4b02      	ldr	r3, [pc, #8]	; (8004b04 <puts+0xc>)
 8004afa:	4601      	mov	r1, r0
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	f7ff bf8d 	b.w	8004a1c <_puts_r>
 8004b02:	bf00      	nop
 8004b04:	200001c0 	.word	0x200001c0

08004b08 <siprintf>:
 8004b08:	b40e      	push	{r1, r2, r3}
 8004b0a:	b500      	push	{lr}
 8004b0c:	b09c      	sub	sp, #112	; 0x70
 8004b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b10:	9002      	str	r0, [sp, #8]
 8004b12:	9006      	str	r0, [sp, #24]
 8004b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b18:	4809      	ldr	r0, [pc, #36]	; (8004b40 <siprintf+0x38>)
 8004b1a:	9107      	str	r1, [sp, #28]
 8004b1c:	9104      	str	r1, [sp, #16]
 8004b1e:	4909      	ldr	r1, [pc, #36]	; (8004b44 <siprintf+0x3c>)
 8004b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b24:	9105      	str	r1, [sp, #20]
 8004b26:	6800      	ldr	r0, [r0, #0]
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	a902      	add	r1, sp, #8
 8004b2c:	f000 fcbc 	bl	80054a8 <_svfiprintf_r>
 8004b30:	9b02      	ldr	r3, [sp, #8]
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	b01c      	add	sp, #112	; 0x70
 8004b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b3c:	b003      	add	sp, #12
 8004b3e:	4770      	bx	lr
 8004b40:	200001c0 	.word	0x200001c0
 8004b44:	ffff0208 	.word	0xffff0208

08004b48 <strtok>:
 8004b48:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <strtok+0x5c>)
 8004b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b4c:	681e      	ldr	r6, [r3, #0]
 8004b4e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004b50:	4605      	mov	r5, r0
 8004b52:	b9fc      	cbnz	r4, 8004b94 <strtok+0x4c>
 8004b54:	2050      	movs	r0, #80	; 0x50
 8004b56:	9101      	str	r1, [sp, #4]
 8004b58:	f000 fb62 	bl	8005220 <malloc>
 8004b5c:	9901      	ldr	r1, [sp, #4]
 8004b5e:	65b0      	str	r0, [r6, #88]	; 0x58
 8004b60:	4602      	mov	r2, r0
 8004b62:	b920      	cbnz	r0, 8004b6e <strtok+0x26>
 8004b64:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <strtok+0x60>)
 8004b66:	4811      	ldr	r0, [pc, #68]	; (8004bac <strtok+0x64>)
 8004b68:	2157      	movs	r1, #87	; 0x57
 8004b6a:	f000 f909 	bl	8004d80 <__assert_func>
 8004b6e:	e9c0 4400 	strd	r4, r4, [r0]
 8004b72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004b76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004b7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004b7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004b82:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004b86:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004b8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004b8e:	6184      	str	r4, [r0, #24]
 8004b90:	7704      	strb	r4, [r0, #28]
 8004b92:	6244      	str	r4, [r0, #36]	; 0x24
 8004b94:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004b96:	2301      	movs	r3, #1
 8004b98:	4628      	mov	r0, r5
 8004b9a:	b002      	add	sp, #8
 8004b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ba0:	f000 b806 	b.w	8004bb0 <__strtok_r>
 8004ba4:	200001c0 	.word	0x200001c0
 8004ba8:	080060cc 	.word	0x080060cc
 8004bac:	080060e3 	.word	0x080060e3

08004bb0 <__strtok_r>:
 8004bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb2:	b908      	cbnz	r0, 8004bb8 <__strtok_r+0x8>
 8004bb4:	6810      	ldr	r0, [r2, #0]
 8004bb6:	b188      	cbz	r0, 8004bdc <__strtok_r+0x2c>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004bc0:	460f      	mov	r7, r1
 8004bc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004bc6:	b91e      	cbnz	r6, 8004bd0 <__strtok_r+0x20>
 8004bc8:	b965      	cbnz	r5, 8004be4 <__strtok_r+0x34>
 8004bca:	6015      	str	r5, [r2, #0]
 8004bcc:	4628      	mov	r0, r5
 8004bce:	e005      	b.n	8004bdc <__strtok_r+0x2c>
 8004bd0:	42b5      	cmp	r5, r6
 8004bd2:	d1f6      	bne.n	8004bc2 <__strtok_r+0x12>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <__strtok_r+0xa>
 8004bd8:	6014      	str	r4, [r2, #0]
 8004bda:	7003      	strb	r3, [r0, #0]
 8004bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bde:	461c      	mov	r4, r3
 8004be0:	e00c      	b.n	8004bfc <__strtok_r+0x4c>
 8004be2:	b915      	cbnz	r5, 8004bea <__strtok_r+0x3a>
 8004be4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004be8:	460e      	mov	r6, r1
 8004bea:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004bee:	42ab      	cmp	r3, r5
 8004bf0:	d1f7      	bne.n	8004be2 <__strtok_r+0x32>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f3      	beq.n	8004bde <__strtok_r+0x2e>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004bfc:	6014      	str	r4, [r2, #0]
 8004bfe:	e7ed      	b.n	8004bdc <__strtok_r+0x2c>

08004c00 <__swbuf_r>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	460e      	mov	r6, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	4605      	mov	r5, r0
 8004c08:	b118      	cbz	r0, 8004c12 <__swbuf_r+0x12>
 8004c0a:	6983      	ldr	r3, [r0, #24]
 8004c0c:	b90b      	cbnz	r3, 8004c12 <__swbuf_r+0x12>
 8004c0e:	f000 f9ef 	bl	8004ff0 <__sinit>
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <__swbuf_r+0x98>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d12b      	bne.n	8004c70 <__swbuf_r+0x70>
 8004c18:	686c      	ldr	r4, [r5, #4]
 8004c1a:	69a3      	ldr	r3, [r4, #24]
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	071a      	lsls	r2, r3, #28
 8004c22:	d52f      	bpl.n	8004c84 <__swbuf_r+0x84>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	b36b      	cbz	r3, 8004c84 <__swbuf_r+0x84>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	1ac0      	subs	r0, r0, r3
 8004c2e:	6963      	ldr	r3, [r4, #20]
 8004c30:	b2f6      	uxtb	r6, r6
 8004c32:	4283      	cmp	r3, r0
 8004c34:	4637      	mov	r7, r6
 8004c36:	dc04      	bgt.n	8004c42 <__swbuf_r+0x42>
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f944 	bl	8004ec8 <_fflush_r>
 8004c40:	bb30      	cbnz	r0, 8004c90 <__swbuf_r+0x90>
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	60a3      	str	r3, [r4, #8]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	6022      	str	r2, [r4, #0]
 8004c4e:	701e      	strb	r6, [r3, #0]
 8004c50:	6963      	ldr	r3, [r4, #20]
 8004c52:	3001      	adds	r0, #1
 8004c54:	4283      	cmp	r3, r0
 8004c56:	d004      	beq.n	8004c62 <__swbuf_r+0x62>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d506      	bpl.n	8004c6c <__swbuf_r+0x6c>
 8004c5e:	2e0a      	cmp	r6, #10
 8004c60:	d104      	bne.n	8004c6c <__swbuf_r+0x6c>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f92f 	bl	8004ec8 <_fflush_r>
 8004c6a:	b988      	cbnz	r0, 8004c90 <__swbuf_r+0x90>
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <__swbuf_r+0x9c>)
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d101      	bne.n	8004c7a <__swbuf_r+0x7a>
 8004c76:	68ac      	ldr	r4, [r5, #8]
 8004c78:	e7cf      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <__swbuf_r+0xa0>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	bf08      	it	eq
 8004c80:	68ec      	ldreq	r4, [r5, #12]
 8004c82:	e7ca      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c84:	4621      	mov	r1, r4
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f80c 	bl	8004ca4 <__swsetup_r>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d0cb      	beq.n	8004c28 <__swbuf_r+0x28>
 8004c90:	f04f 37ff 	mov.w	r7, #4294967295
 8004c94:	e7ea      	b.n	8004c6c <__swbuf_r+0x6c>
 8004c96:	bf00      	nop
 8004c98:	0800619c 	.word	0x0800619c
 8004c9c:	080061bc 	.word	0x080061bc
 8004ca0:	0800617c 	.word	0x0800617c

08004ca4 <__swsetup_r>:
 8004ca4:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <__swsetup_r+0xcc>)
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	681d      	ldr	r5, [r3, #0]
 8004caa:	4606      	mov	r6, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	b125      	cbz	r5, 8004cba <__swsetup_r+0x16>
 8004cb0:	69ab      	ldr	r3, [r5, #24]
 8004cb2:	b913      	cbnz	r3, 8004cba <__swsetup_r+0x16>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 f99b 	bl	8004ff0 <__sinit>
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <__swsetup_r+0xd0>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d10f      	bne.n	8004ce0 <__swsetup_r+0x3c>
 8004cc0:	686c      	ldr	r4, [r5, #4]
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cc8:	0719      	lsls	r1, r3, #28
 8004cca:	d42c      	bmi.n	8004d26 <__swsetup_r+0x82>
 8004ccc:	06dd      	lsls	r5, r3, #27
 8004cce:	d411      	bmi.n	8004cf4 <__swsetup_r+0x50>
 8004cd0:	2309      	movs	r3, #9
 8004cd2:	6033      	str	r3, [r6, #0]
 8004cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e03e      	b.n	8004d5e <__swsetup_r+0xba>
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <__swsetup_r+0xd4>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d101      	bne.n	8004cea <__swsetup_r+0x46>
 8004ce6:	68ac      	ldr	r4, [r5, #8]
 8004ce8:	e7eb      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <__swsetup_r+0xd8>)
 8004cec:	429c      	cmp	r4, r3
 8004cee:	bf08      	it	eq
 8004cf0:	68ec      	ldreq	r4, [r5, #12]
 8004cf2:	e7e6      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cf4:	0758      	lsls	r0, r3, #29
 8004cf6:	d512      	bpl.n	8004d1e <__swsetup_r+0x7a>
 8004cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfa:	b141      	cbz	r1, 8004d0e <__swsetup_r+0x6a>
 8004cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d002      	beq.n	8004d0a <__swsetup_r+0x66>
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 fa93 	bl	8005230 <_free_r>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	2300      	movs	r3, #0
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	b94b      	cbnz	r3, 8004d3e <__swsetup_r+0x9a>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d003      	beq.n	8004d3e <__swsetup_r+0x9a>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 fa31 	bl	80051a0 <__smakebuf_r>
 8004d3e:	89a0      	ldrh	r0, [r4, #12]
 8004d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d44:	f010 0301 	ands.w	r3, r0, #1
 8004d48:	d00a      	beq.n	8004d60 <__swsetup_r+0xbc>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	6963      	ldr	r3, [r4, #20]
 8004d50:	425b      	negs	r3, r3
 8004d52:	61a3      	str	r3, [r4, #24]
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	b943      	cbnz	r3, 8004d6a <__swsetup_r+0xc6>
 8004d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d5c:	d1ba      	bne.n	8004cd4 <__swsetup_r+0x30>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	0781      	lsls	r1, r0, #30
 8004d62:	bf58      	it	pl
 8004d64:	6963      	ldrpl	r3, [r4, #20]
 8004d66:	60a3      	str	r3, [r4, #8]
 8004d68:	e7f4      	b.n	8004d54 <__swsetup_r+0xb0>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e7f7      	b.n	8004d5e <__swsetup_r+0xba>
 8004d6e:	bf00      	nop
 8004d70:	200001c0 	.word	0x200001c0
 8004d74:	0800619c 	.word	0x0800619c
 8004d78:	080061bc 	.word	0x080061bc
 8004d7c:	0800617c 	.word	0x0800617c

08004d80 <__assert_func>:
 8004d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d82:	4614      	mov	r4, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <__assert_func+0x2c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	68d8      	ldr	r0, [r3, #12]
 8004d8e:	b14c      	cbz	r4, 8004da4 <__assert_func+0x24>
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <__assert_func+0x30>)
 8004d92:	9100      	str	r1, [sp, #0]
 8004d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d98:	4906      	ldr	r1, [pc, #24]	; (8004db4 <__assert_func+0x34>)
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	f000 f9a6 	bl	80050ec <fiprintf>
 8004da0:	f000 ffd6 	bl	8005d50 <abort>
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <__assert_func+0x38>)
 8004da6:	461c      	mov	r4, r3
 8004da8:	e7f3      	b.n	8004d92 <__assert_func+0x12>
 8004daa:	bf00      	nop
 8004dac:	200001c0 	.word	0x200001c0
 8004db0:	08006140 	.word	0x08006140
 8004db4:	0800614d 	.word	0x0800614d
 8004db8:	0800617b 	.word	0x0800617b

08004dbc <__sflush_r>:
 8004dbc:	898a      	ldrh	r2, [r1, #12]
 8004dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	0710      	lsls	r0, r2, #28
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	d458      	bmi.n	8004e7c <__sflush_r+0xc0>
 8004dca:	684b      	ldr	r3, [r1, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dc05      	bgt.n	8004ddc <__sflush_r+0x20>
 8004dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dc02      	bgt.n	8004ddc <__sflush_r+0x20>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d0f9      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004de2:	2300      	movs	r3, #0
 8004de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004de8:	682f      	ldr	r7, [r5, #0]
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	d032      	beq.n	8004e54 <__sflush_r+0x98>
 8004dee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	075a      	lsls	r2, r3, #29
 8004df4:	d505      	bpl.n	8004e02 <__sflush_r+0x46>
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	1ac0      	subs	r0, r0, r3
 8004dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dfc:	b10b      	cbz	r3, 8004e02 <__sflush_r+0x46>
 8004dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e00:	1ac0      	subs	r0, r0, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	4602      	mov	r2, r0
 8004e06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e08:	6a21      	ldr	r1, [r4, #32]
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b0      	blx	r6
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	d106      	bne.n	8004e22 <__sflush_r+0x66>
 8004e14:	6829      	ldr	r1, [r5, #0]
 8004e16:	291d      	cmp	r1, #29
 8004e18:	d82c      	bhi.n	8004e74 <__sflush_r+0xb8>
 8004e1a:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <__sflush_r+0x108>)
 8004e1c:	40ca      	lsrs	r2, r1
 8004e1e:	07d6      	lsls	r6, r2, #31
 8004e20:	d528      	bpl.n	8004e74 <__sflush_r+0xb8>
 8004e22:	2200      	movs	r2, #0
 8004e24:	6062      	str	r2, [r4, #4]
 8004e26:	04d9      	lsls	r1, r3, #19
 8004e28:	6922      	ldr	r2, [r4, #16]
 8004e2a:	6022      	str	r2, [r4, #0]
 8004e2c:	d504      	bpl.n	8004e38 <__sflush_r+0x7c>
 8004e2e:	1c42      	adds	r2, r0, #1
 8004e30:	d101      	bne.n	8004e36 <__sflush_r+0x7a>
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	b903      	cbnz	r3, 8004e38 <__sflush_r+0x7c>
 8004e36:	6560      	str	r0, [r4, #84]	; 0x54
 8004e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e3a:	602f      	str	r7, [r5, #0]
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	d0ca      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d002      	beq.n	8004e4e <__sflush_r+0x92>
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f9f1 	bl	8005230 <_free_r>
 8004e4e:	2000      	movs	r0, #0
 8004e50:	6360      	str	r0, [r4, #52]	; 0x34
 8004e52:	e7c1      	b.n	8004dd8 <__sflush_r+0x1c>
 8004e54:	6a21      	ldr	r1, [r4, #32]
 8004e56:	2301      	movs	r3, #1
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b0      	blx	r6
 8004e5c:	1c41      	adds	r1, r0, #1
 8004e5e:	d1c7      	bne.n	8004df0 <__sflush_r+0x34>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0c4      	beq.n	8004df0 <__sflush_r+0x34>
 8004e66:	2b1d      	cmp	r3, #29
 8004e68:	d001      	beq.n	8004e6e <__sflush_r+0xb2>
 8004e6a:	2b16      	cmp	r3, #22
 8004e6c:	d101      	bne.n	8004e72 <__sflush_r+0xb6>
 8004e6e:	602f      	str	r7, [r5, #0]
 8004e70:	e7b1      	b.n	8004dd6 <__sflush_r+0x1a>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	e7ad      	b.n	8004dd8 <__sflush_r+0x1c>
 8004e7c:	690f      	ldr	r7, [r1, #16]
 8004e7e:	2f00      	cmp	r7, #0
 8004e80:	d0a9      	beq.n	8004dd6 <__sflush_r+0x1a>
 8004e82:	0793      	lsls	r3, r2, #30
 8004e84:	680e      	ldr	r6, [r1, #0]
 8004e86:	bf08      	it	eq
 8004e88:	694b      	ldreq	r3, [r1, #20]
 8004e8a:	600f      	str	r7, [r1, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	2300      	movne	r3, #0
 8004e90:	eba6 0807 	sub.w	r8, r6, r7
 8004e94:	608b      	str	r3, [r1, #8]
 8004e96:	f1b8 0f00 	cmp.w	r8, #0
 8004e9a:	dd9c      	ble.n	8004dd6 <__sflush_r+0x1a>
 8004e9c:	6a21      	ldr	r1, [r4, #32]
 8004e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ea0:	4643      	mov	r3, r8
 8004ea2:	463a      	mov	r2, r7
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b0      	blx	r6
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	dc06      	bgt.n	8004eba <__sflush_r+0xfe>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	e78e      	b.n	8004dd8 <__sflush_r+0x1c>
 8004eba:	4407      	add	r7, r0
 8004ebc:	eba8 0800 	sub.w	r8, r8, r0
 8004ec0:	e7e9      	b.n	8004e96 <__sflush_r+0xda>
 8004ec2:	bf00      	nop
 8004ec4:	20400001 	.word	0x20400001

08004ec8 <_fflush_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	690b      	ldr	r3, [r1, #16]
 8004ecc:	4605      	mov	r5, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	b913      	cbnz	r3, 8004ed8 <_fflush_r+0x10>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	b118      	cbz	r0, 8004ee2 <_fflush_r+0x1a>
 8004eda:	6983      	ldr	r3, [r0, #24]
 8004edc:	b90b      	cbnz	r3, 8004ee2 <_fflush_r+0x1a>
 8004ede:	f000 f887 	bl	8004ff0 <__sinit>
 8004ee2:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <_fflush_r+0x6c>)
 8004ee4:	429c      	cmp	r4, r3
 8004ee6:	d11b      	bne.n	8004f20 <_fflush_r+0x58>
 8004ee8:	686c      	ldr	r4, [r5, #4]
 8004eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ef      	beq.n	8004ed2 <_fflush_r+0xa>
 8004ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ef4:	07d0      	lsls	r0, r2, #31
 8004ef6:	d404      	bmi.n	8004f02 <_fflush_r+0x3a>
 8004ef8:	0599      	lsls	r1, r3, #22
 8004efa:	d402      	bmi.n	8004f02 <_fflush_r+0x3a>
 8004efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efe:	f000 f927 	bl	8005150 <__retarget_lock_acquire_recursive>
 8004f02:	4628      	mov	r0, r5
 8004f04:	4621      	mov	r1, r4
 8004f06:	f7ff ff59 	bl	8004dbc <__sflush_r>
 8004f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0c:	07da      	lsls	r2, r3, #31
 8004f0e:	4605      	mov	r5, r0
 8004f10:	d4e0      	bmi.n	8004ed4 <_fflush_r+0xc>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	059b      	lsls	r3, r3, #22
 8004f16:	d4dd      	bmi.n	8004ed4 <_fflush_r+0xc>
 8004f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1a:	f000 f91a 	bl	8005152 <__retarget_lock_release_recursive>
 8004f1e:	e7d9      	b.n	8004ed4 <_fflush_r+0xc>
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <_fflush_r+0x70>)
 8004f22:	429c      	cmp	r4, r3
 8004f24:	d101      	bne.n	8004f2a <_fflush_r+0x62>
 8004f26:	68ac      	ldr	r4, [r5, #8]
 8004f28:	e7df      	b.n	8004eea <_fflush_r+0x22>
 8004f2a:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <_fflush_r+0x74>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	bf08      	it	eq
 8004f30:	68ec      	ldreq	r4, [r5, #12]
 8004f32:	e7da      	b.n	8004eea <_fflush_r+0x22>
 8004f34:	0800619c 	.word	0x0800619c
 8004f38:	080061bc 	.word	0x080061bc
 8004f3c:	0800617c 	.word	0x0800617c

08004f40 <std>:
 8004f40:	2300      	movs	r3, #0
 8004f42:	b510      	push	{r4, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	e9c0 3300 	strd	r3, r3, [r0]
 8004f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f4e:	6083      	str	r3, [r0, #8]
 8004f50:	8181      	strh	r1, [r0, #12]
 8004f52:	6643      	str	r3, [r0, #100]	; 0x64
 8004f54:	81c2      	strh	r2, [r0, #14]
 8004f56:	6183      	str	r3, [r0, #24]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	2208      	movs	r2, #8
 8004f5c:	305c      	adds	r0, #92	; 0x5c
 8004f5e:	f7ff fd3d 	bl	80049dc <memset>
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <std+0x38>)
 8004f64:	6263      	str	r3, [r4, #36]	; 0x24
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <std+0x3c>)
 8004f68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <std+0x40>)
 8004f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <std+0x44>)
 8004f70:	6224      	str	r4, [r4, #32]
 8004f72:	6323      	str	r3, [r4, #48]	; 0x30
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	08005ca5 	.word	0x08005ca5
 8004f7c:	08005cc7 	.word	0x08005cc7
 8004f80:	08005cff 	.word	0x08005cff
 8004f84:	08005d23 	.word	0x08005d23

08004f88 <_cleanup_r>:
 8004f88:	4901      	ldr	r1, [pc, #4]	; (8004f90 <_cleanup_r+0x8>)
 8004f8a:	f000 b8c1 	b.w	8005110 <_fwalk_reent>
 8004f8e:	bf00      	nop
 8004f90:	08004ec9 	.word	0x08004ec9

08004f94 <__sfmoreglue>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	2268      	movs	r2, #104	; 0x68
 8004f98:	1e4d      	subs	r5, r1, #1
 8004f9a:	4355      	muls	r5, r2
 8004f9c:	460e      	mov	r6, r1
 8004f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fa2:	f000 f9b1 	bl	8005308 <_malloc_r>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	b140      	cbz	r0, 8004fbc <__sfmoreglue+0x28>
 8004faa:	2100      	movs	r1, #0
 8004fac:	e9c0 1600 	strd	r1, r6, [r0]
 8004fb0:	300c      	adds	r0, #12
 8004fb2:	60a0      	str	r0, [r4, #8]
 8004fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fb8:	f7ff fd10 	bl	80049dc <memset>
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}

08004fc0 <__sfp_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sfp_lock_acquire+0x8>)
 8004fc2:	f000 b8c5 	b.w	8005150 <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	20000499 	.word	0x20000499

08004fcc <__sfp_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sfp_lock_release+0x8>)
 8004fce:	f000 b8c0 	b.w	8005152 <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	20000499 	.word	0x20000499

08004fd8 <__sinit_lock_acquire>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__sinit_lock_acquire+0x8>)
 8004fda:	f000 b8b9 	b.w	8005150 <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	2000049a 	.word	0x2000049a

08004fe4 <__sinit_lock_release>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__sinit_lock_release+0x8>)
 8004fe6:	f000 b8b4 	b.w	8005152 <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	2000049a 	.word	0x2000049a

08004ff0 <__sinit>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	f7ff fff0 	bl	8004fd8 <__sinit_lock_acquire>
 8004ff8:	69a3      	ldr	r3, [r4, #24]
 8004ffa:	b11b      	cbz	r3, 8005004 <__sinit+0x14>
 8004ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005000:	f7ff bff0 	b.w	8004fe4 <__sinit_lock_release>
 8005004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005008:	6523      	str	r3, [r4, #80]	; 0x50
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <__sinit+0x68>)
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <__sinit+0x6c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	62a2      	str	r2, [r4, #40]	; 0x28
 8005012:	42a3      	cmp	r3, r4
 8005014:	bf04      	itt	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	61a3      	streq	r3, [r4, #24]
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f820 	bl	8005060 <__sfp>
 8005020:	6060      	str	r0, [r4, #4]
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f81c 	bl	8005060 <__sfp>
 8005028:	60a0      	str	r0, [r4, #8]
 800502a:	4620      	mov	r0, r4
 800502c:	f000 f818 	bl	8005060 <__sfp>
 8005030:	2200      	movs	r2, #0
 8005032:	60e0      	str	r0, [r4, #12]
 8005034:	2104      	movs	r1, #4
 8005036:	6860      	ldr	r0, [r4, #4]
 8005038:	f7ff ff82 	bl	8004f40 <std>
 800503c:	68a0      	ldr	r0, [r4, #8]
 800503e:	2201      	movs	r2, #1
 8005040:	2109      	movs	r1, #9
 8005042:	f7ff ff7d 	bl	8004f40 <std>
 8005046:	68e0      	ldr	r0, [r4, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	2112      	movs	r1, #18
 800504c:	f7ff ff78 	bl	8004f40 <std>
 8005050:	2301      	movs	r3, #1
 8005052:	61a3      	str	r3, [r4, #24]
 8005054:	e7d2      	b.n	8004ffc <__sinit+0xc>
 8005056:	bf00      	nop
 8005058:	080060c8 	.word	0x080060c8
 800505c:	08004f89 	.word	0x08004f89

08005060 <__sfp>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	4607      	mov	r7, r0
 8005064:	f7ff ffac 	bl	8004fc0 <__sfp_lock_acquire>
 8005068:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <__sfp+0x84>)
 800506a:	681e      	ldr	r6, [r3, #0]
 800506c:	69b3      	ldr	r3, [r6, #24]
 800506e:	b913      	cbnz	r3, 8005076 <__sfp+0x16>
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff ffbd 	bl	8004ff0 <__sinit>
 8005076:	3648      	adds	r6, #72	; 0x48
 8005078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800507c:	3b01      	subs	r3, #1
 800507e:	d503      	bpl.n	8005088 <__sfp+0x28>
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	b30b      	cbz	r3, 80050c8 <__sfp+0x68>
 8005084:	6836      	ldr	r6, [r6, #0]
 8005086:	e7f7      	b.n	8005078 <__sfp+0x18>
 8005088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800508c:	b9d5      	cbnz	r5, 80050c4 <__sfp+0x64>
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <__sfp+0x88>)
 8005090:	60e3      	str	r3, [r4, #12]
 8005092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005096:	6665      	str	r5, [r4, #100]	; 0x64
 8005098:	f000 f859 	bl	800514e <__retarget_lock_init_recursive>
 800509c:	f7ff ff96 	bl	8004fcc <__sfp_lock_release>
 80050a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050a8:	6025      	str	r5, [r4, #0]
 80050aa:	61a5      	str	r5, [r4, #24]
 80050ac:	2208      	movs	r2, #8
 80050ae:	4629      	mov	r1, r5
 80050b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050b4:	f7ff fc92 	bl	80049dc <memset>
 80050b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050c0:	4620      	mov	r0, r4
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c4:	3468      	adds	r4, #104	; 0x68
 80050c6:	e7d9      	b.n	800507c <__sfp+0x1c>
 80050c8:	2104      	movs	r1, #4
 80050ca:	4638      	mov	r0, r7
 80050cc:	f7ff ff62 	bl	8004f94 <__sfmoreglue>
 80050d0:	4604      	mov	r4, r0
 80050d2:	6030      	str	r0, [r6, #0]
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1d5      	bne.n	8005084 <__sfp+0x24>
 80050d8:	f7ff ff78 	bl	8004fcc <__sfp_lock_release>
 80050dc:	230c      	movs	r3, #12
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	e7ee      	b.n	80050c0 <__sfp+0x60>
 80050e2:	bf00      	nop
 80050e4:	080060c8 	.word	0x080060c8
 80050e8:	ffff0001 	.word	0xffff0001

080050ec <fiprintf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b503      	push	{r0, r1, lr}
 80050f0:	4601      	mov	r1, r0
 80050f2:	ab03      	add	r3, sp, #12
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <fiprintf+0x20>)
 80050f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	f000 fafd 	bl	80056fc <_vfiprintf_r>
 8005102:	b002      	add	sp, #8
 8005104:	f85d eb04 	ldr.w	lr, [sp], #4
 8005108:	b003      	add	sp, #12
 800510a:	4770      	bx	lr
 800510c:	200001c0 	.word	0x200001c0

08005110 <_fwalk_reent>:
 8005110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005114:	4606      	mov	r6, r0
 8005116:	4688      	mov	r8, r1
 8005118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800511c:	2700      	movs	r7, #0
 800511e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005122:	f1b9 0901 	subs.w	r9, r9, #1
 8005126:	d505      	bpl.n	8005134 <_fwalk_reent+0x24>
 8005128:	6824      	ldr	r4, [r4, #0]
 800512a:	2c00      	cmp	r4, #0
 800512c:	d1f7      	bne.n	800511e <_fwalk_reent+0xe>
 800512e:	4638      	mov	r0, r7
 8005130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005134:	89ab      	ldrh	r3, [r5, #12]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d907      	bls.n	800514a <_fwalk_reent+0x3a>
 800513a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800513e:	3301      	adds	r3, #1
 8005140:	d003      	beq.n	800514a <_fwalk_reent+0x3a>
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	47c0      	blx	r8
 8005148:	4307      	orrs	r7, r0
 800514a:	3568      	adds	r5, #104	; 0x68
 800514c:	e7e9      	b.n	8005122 <_fwalk_reent+0x12>

0800514e <__retarget_lock_init_recursive>:
 800514e:	4770      	bx	lr

08005150 <__retarget_lock_acquire_recursive>:
 8005150:	4770      	bx	lr

08005152 <__retarget_lock_release_recursive>:
 8005152:	4770      	bx	lr

08005154 <__swhatbuf_r>:
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	460e      	mov	r6, r1
 8005158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800515c:	2900      	cmp	r1, #0
 800515e:	b096      	sub	sp, #88	; 0x58
 8005160:	4614      	mov	r4, r2
 8005162:	461d      	mov	r5, r3
 8005164:	da08      	bge.n	8005178 <__swhatbuf_r+0x24>
 8005166:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	602a      	str	r2, [r5, #0]
 800516e:	061a      	lsls	r2, r3, #24
 8005170:	d410      	bmi.n	8005194 <__swhatbuf_r+0x40>
 8005172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005176:	e00e      	b.n	8005196 <__swhatbuf_r+0x42>
 8005178:	466a      	mov	r2, sp
 800517a:	f000 fe01 	bl	8005d80 <_fstat_r>
 800517e:	2800      	cmp	r0, #0
 8005180:	dbf1      	blt.n	8005166 <__swhatbuf_r+0x12>
 8005182:	9a01      	ldr	r2, [sp, #4]
 8005184:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005188:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800518c:	425a      	negs	r2, r3
 800518e:	415a      	adcs	r2, r3
 8005190:	602a      	str	r2, [r5, #0]
 8005192:	e7ee      	b.n	8005172 <__swhatbuf_r+0x1e>
 8005194:	2340      	movs	r3, #64	; 0x40
 8005196:	2000      	movs	r0, #0
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	b016      	add	sp, #88	; 0x58
 800519c:	bd70      	pop	{r4, r5, r6, pc}
	...

080051a0 <__smakebuf_r>:
 80051a0:	898b      	ldrh	r3, [r1, #12]
 80051a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051a4:	079d      	lsls	r5, r3, #30
 80051a6:	4606      	mov	r6, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	d507      	bpl.n	80051bc <__smakebuf_r+0x1c>
 80051ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	6123      	str	r3, [r4, #16]
 80051b4:	2301      	movs	r3, #1
 80051b6:	6163      	str	r3, [r4, #20]
 80051b8:	b002      	add	sp, #8
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	ab01      	add	r3, sp, #4
 80051be:	466a      	mov	r2, sp
 80051c0:	f7ff ffc8 	bl	8005154 <__swhatbuf_r>
 80051c4:	9900      	ldr	r1, [sp, #0]
 80051c6:	4605      	mov	r5, r0
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f89d 	bl	8005308 <_malloc_r>
 80051ce:	b948      	cbnz	r0, 80051e4 <__smakebuf_r+0x44>
 80051d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d4:	059a      	lsls	r2, r3, #22
 80051d6:	d4ef      	bmi.n	80051b8 <__smakebuf_r+0x18>
 80051d8:	f023 0303 	bic.w	r3, r3, #3
 80051dc:	f043 0302 	orr.w	r3, r3, #2
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	e7e3      	b.n	80051ac <__smakebuf_r+0xc>
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <__smakebuf_r+0x7c>)
 80051e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	6020      	str	r0, [r4, #0]
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	81a3      	strh	r3, [r4, #12]
 80051f2:	9b00      	ldr	r3, [sp, #0]
 80051f4:	6163      	str	r3, [r4, #20]
 80051f6:	9b01      	ldr	r3, [sp, #4]
 80051f8:	6120      	str	r0, [r4, #16]
 80051fa:	b15b      	cbz	r3, 8005214 <__smakebuf_r+0x74>
 80051fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005200:	4630      	mov	r0, r6
 8005202:	f000 fdcf 	bl	8005da4 <_isatty_r>
 8005206:	b128      	cbz	r0, 8005214 <__smakebuf_r+0x74>
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	81a3      	strh	r3, [r4, #12]
 8005214:	89a0      	ldrh	r0, [r4, #12]
 8005216:	4305      	orrs	r5, r0
 8005218:	81a5      	strh	r5, [r4, #12]
 800521a:	e7cd      	b.n	80051b8 <__smakebuf_r+0x18>
 800521c:	08004f89 	.word	0x08004f89

08005220 <malloc>:
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <malloc+0xc>)
 8005222:	4601      	mov	r1, r0
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f000 b86f 	b.w	8005308 <_malloc_r>
 800522a:	bf00      	nop
 800522c:	200001c0 	.word	0x200001c0

08005230 <_free_r>:
 8005230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005232:	2900      	cmp	r1, #0
 8005234:	d044      	beq.n	80052c0 <_free_r+0x90>
 8005236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523a:	9001      	str	r0, [sp, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f1a1 0404 	sub.w	r4, r1, #4
 8005242:	bfb8      	it	lt
 8005244:	18e4      	addlt	r4, r4, r3
 8005246:	f000 fdf7 	bl	8005e38 <__malloc_lock>
 800524a:	4a1e      	ldr	r2, [pc, #120]	; (80052c4 <_free_r+0x94>)
 800524c:	9801      	ldr	r0, [sp, #4]
 800524e:	6813      	ldr	r3, [r2, #0]
 8005250:	b933      	cbnz	r3, 8005260 <_free_r+0x30>
 8005252:	6063      	str	r3, [r4, #4]
 8005254:	6014      	str	r4, [r2, #0]
 8005256:	b003      	add	sp, #12
 8005258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800525c:	f000 bdf2 	b.w	8005e44 <__malloc_unlock>
 8005260:	42a3      	cmp	r3, r4
 8005262:	d908      	bls.n	8005276 <_free_r+0x46>
 8005264:	6825      	ldr	r5, [r4, #0]
 8005266:	1961      	adds	r1, r4, r5
 8005268:	428b      	cmp	r3, r1
 800526a:	bf01      	itttt	eq
 800526c:	6819      	ldreq	r1, [r3, #0]
 800526e:	685b      	ldreq	r3, [r3, #4]
 8005270:	1949      	addeq	r1, r1, r5
 8005272:	6021      	streq	r1, [r4, #0]
 8005274:	e7ed      	b.n	8005252 <_free_r+0x22>
 8005276:	461a      	mov	r2, r3
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	b10b      	cbz	r3, 8005280 <_free_r+0x50>
 800527c:	42a3      	cmp	r3, r4
 800527e:	d9fa      	bls.n	8005276 <_free_r+0x46>
 8005280:	6811      	ldr	r1, [r2, #0]
 8005282:	1855      	adds	r5, r2, r1
 8005284:	42a5      	cmp	r5, r4
 8005286:	d10b      	bne.n	80052a0 <_free_r+0x70>
 8005288:	6824      	ldr	r4, [r4, #0]
 800528a:	4421      	add	r1, r4
 800528c:	1854      	adds	r4, r2, r1
 800528e:	42a3      	cmp	r3, r4
 8005290:	6011      	str	r1, [r2, #0]
 8005292:	d1e0      	bne.n	8005256 <_free_r+0x26>
 8005294:	681c      	ldr	r4, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	6053      	str	r3, [r2, #4]
 800529a:	4421      	add	r1, r4
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	e7da      	b.n	8005256 <_free_r+0x26>
 80052a0:	d902      	bls.n	80052a8 <_free_r+0x78>
 80052a2:	230c      	movs	r3, #12
 80052a4:	6003      	str	r3, [r0, #0]
 80052a6:	e7d6      	b.n	8005256 <_free_r+0x26>
 80052a8:	6825      	ldr	r5, [r4, #0]
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	428b      	cmp	r3, r1
 80052ae:	bf04      	itt	eq
 80052b0:	6819      	ldreq	r1, [r3, #0]
 80052b2:	685b      	ldreq	r3, [r3, #4]
 80052b4:	6063      	str	r3, [r4, #4]
 80052b6:	bf04      	itt	eq
 80052b8:	1949      	addeq	r1, r1, r5
 80052ba:	6021      	streq	r1, [r4, #0]
 80052bc:	6054      	str	r4, [r2, #4]
 80052be:	e7ca      	b.n	8005256 <_free_r+0x26>
 80052c0:	b003      	add	sp, #12
 80052c2:	bd30      	pop	{r4, r5, pc}
 80052c4:	2000049c 	.word	0x2000049c

080052c8 <sbrk_aligned>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4e0e      	ldr	r6, [pc, #56]	; (8005304 <sbrk_aligned+0x3c>)
 80052cc:	460c      	mov	r4, r1
 80052ce:	6831      	ldr	r1, [r6, #0]
 80052d0:	4605      	mov	r5, r0
 80052d2:	b911      	cbnz	r1, 80052da <sbrk_aligned+0x12>
 80052d4:	f000 fcd6 	bl	8005c84 <_sbrk_r>
 80052d8:	6030      	str	r0, [r6, #0]
 80052da:	4621      	mov	r1, r4
 80052dc:	4628      	mov	r0, r5
 80052de:	f000 fcd1 	bl	8005c84 <_sbrk_r>
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	d00a      	beq.n	80052fc <sbrk_aligned+0x34>
 80052e6:	1cc4      	adds	r4, r0, #3
 80052e8:	f024 0403 	bic.w	r4, r4, #3
 80052ec:	42a0      	cmp	r0, r4
 80052ee:	d007      	beq.n	8005300 <sbrk_aligned+0x38>
 80052f0:	1a21      	subs	r1, r4, r0
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 fcc6 	bl	8005c84 <_sbrk_r>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d101      	bne.n	8005300 <sbrk_aligned+0x38>
 80052fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005300:	4620      	mov	r0, r4
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	200004a0 	.word	0x200004a0

08005308 <_malloc_r>:
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	1ccd      	adds	r5, r1, #3
 800530e:	f025 0503 	bic.w	r5, r5, #3
 8005312:	3508      	adds	r5, #8
 8005314:	2d0c      	cmp	r5, #12
 8005316:	bf38      	it	cc
 8005318:	250c      	movcc	r5, #12
 800531a:	2d00      	cmp	r5, #0
 800531c:	4607      	mov	r7, r0
 800531e:	db01      	blt.n	8005324 <_malloc_r+0x1c>
 8005320:	42a9      	cmp	r1, r5
 8005322:	d905      	bls.n	8005330 <_malloc_r+0x28>
 8005324:	230c      	movs	r3, #12
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	2600      	movs	r6, #0
 800532a:	4630      	mov	r0, r6
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005330:	4e2e      	ldr	r6, [pc, #184]	; (80053ec <_malloc_r+0xe4>)
 8005332:	f000 fd81 	bl	8005e38 <__malloc_lock>
 8005336:	6833      	ldr	r3, [r6, #0]
 8005338:	461c      	mov	r4, r3
 800533a:	bb34      	cbnz	r4, 800538a <_malloc_r+0x82>
 800533c:	4629      	mov	r1, r5
 800533e:	4638      	mov	r0, r7
 8005340:	f7ff ffc2 	bl	80052c8 <sbrk_aligned>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	4604      	mov	r4, r0
 8005348:	d14d      	bne.n	80053e6 <_malloc_r+0xde>
 800534a:	6834      	ldr	r4, [r6, #0]
 800534c:	4626      	mov	r6, r4
 800534e:	2e00      	cmp	r6, #0
 8005350:	d140      	bne.n	80053d4 <_malloc_r+0xcc>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	4631      	mov	r1, r6
 8005356:	4638      	mov	r0, r7
 8005358:	eb04 0803 	add.w	r8, r4, r3
 800535c:	f000 fc92 	bl	8005c84 <_sbrk_r>
 8005360:	4580      	cmp	r8, r0
 8005362:	d13a      	bne.n	80053da <_malloc_r+0xd2>
 8005364:	6821      	ldr	r1, [r4, #0]
 8005366:	3503      	adds	r5, #3
 8005368:	1a6d      	subs	r5, r5, r1
 800536a:	f025 0503 	bic.w	r5, r5, #3
 800536e:	3508      	adds	r5, #8
 8005370:	2d0c      	cmp	r5, #12
 8005372:	bf38      	it	cc
 8005374:	250c      	movcc	r5, #12
 8005376:	4629      	mov	r1, r5
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff ffa5 	bl	80052c8 <sbrk_aligned>
 800537e:	3001      	adds	r0, #1
 8005380:	d02b      	beq.n	80053da <_malloc_r+0xd2>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	442b      	add	r3, r5
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	e00e      	b.n	80053a8 <_malloc_r+0xa0>
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	1b52      	subs	r2, r2, r5
 800538e:	d41e      	bmi.n	80053ce <_malloc_r+0xc6>
 8005390:	2a0b      	cmp	r2, #11
 8005392:	d916      	bls.n	80053c2 <_malloc_r+0xba>
 8005394:	1961      	adds	r1, r4, r5
 8005396:	42a3      	cmp	r3, r4
 8005398:	6025      	str	r5, [r4, #0]
 800539a:	bf18      	it	ne
 800539c:	6059      	strne	r1, [r3, #4]
 800539e:	6863      	ldr	r3, [r4, #4]
 80053a0:	bf08      	it	eq
 80053a2:	6031      	streq	r1, [r6, #0]
 80053a4:	5162      	str	r2, [r4, r5]
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	4638      	mov	r0, r7
 80053aa:	f104 060b 	add.w	r6, r4, #11
 80053ae:	f000 fd49 	bl	8005e44 <__malloc_unlock>
 80053b2:	f026 0607 	bic.w	r6, r6, #7
 80053b6:	1d23      	adds	r3, r4, #4
 80053b8:	1af2      	subs	r2, r6, r3
 80053ba:	d0b6      	beq.n	800532a <_malloc_r+0x22>
 80053bc:	1b9b      	subs	r3, r3, r6
 80053be:	50a3      	str	r3, [r4, r2]
 80053c0:	e7b3      	b.n	800532a <_malloc_r+0x22>
 80053c2:	6862      	ldr	r2, [r4, #4]
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	bf0c      	ite	eq
 80053c8:	6032      	streq	r2, [r6, #0]
 80053ca:	605a      	strne	r2, [r3, #4]
 80053cc:	e7ec      	b.n	80053a8 <_malloc_r+0xa0>
 80053ce:	4623      	mov	r3, r4
 80053d0:	6864      	ldr	r4, [r4, #4]
 80053d2:	e7b2      	b.n	800533a <_malloc_r+0x32>
 80053d4:	4634      	mov	r4, r6
 80053d6:	6876      	ldr	r6, [r6, #4]
 80053d8:	e7b9      	b.n	800534e <_malloc_r+0x46>
 80053da:	230c      	movs	r3, #12
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	4638      	mov	r0, r7
 80053e0:	f000 fd30 	bl	8005e44 <__malloc_unlock>
 80053e4:	e7a1      	b.n	800532a <_malloc_r+0x22>
 80053e6:	6025      	str	r5, [r4, #0]
 80053e8:	e7de      	b.n	80053a8 <_malloc_r+0xa0>
 80053ea:	bf00      	nop
 80053ec:	2000049c 	.word	0x2000049c

080053f0 <__ssputs_r>:
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	688e      	ldr	r6, [r1, #8]
 80053f6:	429e      	cmp	r6, r3
 80053f8:	4682      	mov	sl, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	4690      	mov	r8, r2
 80053fe:	461f      	mov	r7, r3
 8005400:	d838      	bhi.n	8005474 <__ssputs_r+0x84>
 8005402:	898a      	ldrh	r2, [r1, #12]
 8005404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005408:	d032      	beq.n	8005470 <__ssputs_r+0x80>
 800540a:	6825      	ldr	r5, [r4, #0]
 800540c:	6909      	ldr	r1, [r1, #16]
 800540e:	eba5 0901 	sub.w	r9, r5, r1
 8005412:	6965      	ldr	r5, [r4, #20]
 8005414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800541c:	3301      	adds	r3, #1
 800541e:	444b      	add	r3, r9
 8005420:	106d      	asrs	r5, r5, #1
 8005422:	429d      	cmp	r5, r3
 8005424:	bf38      	it	cc
 8005426:	461d      	movcc	r5, r3
 8005428:	0553      	lsls	r3, r2, #21
 800542a:	d531      	bpl.n	8005490 <__ssputs_r+0xa0>
 800542c:	4629      	mov	r1, r5
 800542e:	f7ff ff6b 	bl	8005308 <_malloc_r>
 8005432:	4606      	mov	r6, r0
 8005434:	b950      	cbnz	r0, 800544c <__ssputs_r+0x5c>
 8005436:	230c      	movs	r3, #12
 8005438:	f8ca 3000 	str.w	r3, [sl]
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005442:	81a3      	strh	r3, [r4, #12]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295
 8005448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544c:	6921      	ldr	r1, [r4, #16]
 800544e:	464a      	mov	r2, r9
 8005450:	f000 fcca 	bl	8005de8 <memcpy>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800545a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	6126      	str	r6, [r4, #16]
 8005462:	6165      	str	r5, [r4, #20]
 8005464:	444e      	add	r6, r9
 8005466:	eba5 0509 	sub.w	r5, r5, r9
 800546a:	6026      	str	r6, [r4, #0]
 800546c:	60a5      	str	r5, [r4, #8]
 800546e:	463e      	mov	r6, r7
 8005470:	42be      	cmp	r6, r7
 8005472:	d900      	bls.n	8005476 <__ssputs_r+0x86>
 8005474:	463e      	mov	r6, r7
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	4632      	mov	r2, r6
 800547a:	4641      	mov	r1, r8
 800547c:	f000 fcc2 	bl	8005e04 <memmove>
 8005480:	68a3      	ldr	r3, [r4, #8]
 8005482:	1b9b      	subs	r3, r3, r6
 8005484:	60a3      	str	r3, [r4, #8]
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	4433      	add	r3, r6
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	2000      	movs	r0, #0
 800548e:	e7db      	b.n	8005448 <__ssputs_r+0x58>
 8005490:	462a      	mov	r2, r5
 8005492:	f000 fcdd 	bl	8005e50 <_realloc_r>
 8005496:	4606      	mov	r6, r0
 8005498:	2800      	cmp	r0, #0
 800549a:	d1e1      	bne.n	8005460 <__ssputs_r+0x70>
 800549c:	6921      	ldr	r1, [r4, #16]
 800549e:	4650      	mov	r0, sl
 80054a0:	f7ff fec6 	bl	8005230 <_free_r>
 80054a4:	e7c7      	b.n	8005436 <__ssputs_r+0x46>
	...

080054a8 <_svfiprintf_r>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	4698      	mov	r8, r3
 80054ae:	898b      	ldrh	r3, [r1, #12]
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	b09d      	sub	sp, #116	; 0x74
 80054b4:	4607      	mov	r7, r0
 80054b6:	460d      	mov	r5, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	d50e      	bpl.n	80054da <_svfiprintf_r+0x32>
 80054bc:	690b      	ldr	r3, [r1, #16]
 80054be:	b963      	cbnz	r3, 80054da <_svfiprintf_r+0x32>
 80054c0:	2140      	movs	r1, #64	; 0x40
 80054c2:	f7ff ff21 	bl	8005308 <_malloc_r>
 80054c6:	6028      	str	r0, [r5, #0]
 80054c8:	6128      	str	r0, [r5, #16]
 80054ca:	b920      	cbnz	r0, 80054d6 <_svfiprintf_r+0x2e>
 80054cc:	230c      	movs	r3, #12
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	e0d1      	b.n	800567a <_svfiprintf_r+0x1d2>
 80054d6:	2340      	movs	r3, #64	; 0x40
 80054d8:	616b      	str	r3, [r5, #20]
 80054da:	2300      	movs	r3, #0
 80054dc:	9309      	str	r3, [sp, #36]	; 0x24
 80054de:	2320      	movs	r3, #32
 80054e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80054e8:	2330      	movs	r3, #48	; 0x30
 80054ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005694 <_svfiprintf_r+0x1ec>
 80054ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054f2:	f04f 0901 	mov.w	r9, #1
 80054f6:	4623      	mov	r3, r4
 80054f8:	469a      	mov	sl, r3
 80054fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054fe:	b10a      	cbz	r2, 8005504 <_svfiprintf_r+0x5c>
 8005500:	2a25      	cmp	r2, #37	; 0x25
 8005502:	d1f9      	bne.n	80054f8 <_svfiprintf_r+0x50>
 8005504:	ebba 0b04 	subs.w	fp, sl, r4
 8005508:	d00b      	beq.n	8005522 <_svfiprintf_r+0x7a>
 800550a:	465b      	mov	r3, fp
 800550c:	4622      	mov	r2, r4
 800550e:	4629      	mov	r1, r5
 8005510:	4638      	mov	r0, r7
 8005512:	f7ff ff6d 	bl	80053f0 <__ssputs_r>
 8005516:	3001      	adds	r0, #1
 8005518:	f000 80aa 	beq.w	8005670 <_svfiprintf_r+0x1c8>
 800551c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800551e:	445a      	add	r2, fp
 8005520:	9209      	str	r2, [sp, #36]	; 0x24
 8005522:	f89a 3000 	ldrb.w	r3, [sl]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80a2 	beq.w	8005670 <_svfiprintf_r+0x1c8>
 800552c:	2300      	movs	r3, #0
 800552e:	f04f 32ff 	mov.w	r2, #4294967295
 8005532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005536:	f10a 0a01 	add.w	sl, sl, #1
 800553a:	9304      	str	r3, [sp, #16]
 800553c:	9307      	str	r3, [sp, #28]
 800553e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005542:	931a      	str	r3, [sp, #104]	; 0x68
 8005544:	4654      	mov	r4, sl
 8005546:	2205      	movs	r2, #5
 8005548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800554c:	4851      	ldr	r0, [pc, #324]	; (8005694 <_svfiprintf_r+0x1ec>)
 800554e:	f7fa fe77 	bl	8000240 <memchr>
 8005552:	9a04      	ldr	r2, [sp, #16]
 8005554:	b9d8      	cbnz	r0, 800558e <_svfiprintf_r+0xe6>
 8005556:	06d0      	lsls	r0, r2, #27
 8005558:	bf44      	itt	mi
 800555a:	2320      	movmi	r3, #32
 800555c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005560:	0711      	lsls	r1, r2, #28
 8005562:	bf44      	itt	mi
 8005564:	232b      	movmi	r3, #43	; 0x2b
 8005566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800556a:	f89a 3000 	ldrb.w	r3, [sl]
 800556e:	2b2a      	cmp	r3, #42	; 0x2a
 8005570:	d015      	beq.n	800559e <_svfiprintf_r+0xf6>
 8005572:	9a07      	ldr	r2, [sp, #28]
 8005574:	4654      	mov	r4, sl
 8005576:	2000      	movs	r0, #0
 8005578:	f04f 0c0a 	mov.w	ip, #10
 800557c:	4621      	mov	r1, r4
 800557e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005582:	3b30      	subs	r3, #48	; 0x30
 8005584:	2b09      	cmp	r3, #9
 8005586:	d94e      	bls.n	8005626 <_svfiprintf_r+0x17e>
 8005588:	b1b0      	cbz	r0, 80055b8 <_svfiprintf_r+0x110>
 800558a:	9207      	str	r2, [sp, #28]
 800558c:	e014      	b.n	80055b8 <_svfiprintf_r+0x110>
 800558e:	eba0 0308 	sub.w	r3, r0, r8
 8005592:	fa09 f303 	lsl.w	r3, r9, r3
 8005596:	4313      	orrs	r3, r2
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	46a2      	mov	sl, r4
 800559c:	e7d2      	b.n	8005544 <_svfiprintf_r+0x9c>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	1d19      	adds	r1, r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	9103      	str	r1, [sp, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfbb      	ittet	lt
 80055aa:	425b      	neglt	r3, r3
 80055ac:	f042 0202 	orrlt.w	r2, r2, #2
 80055b0:	9307      	strge	r3, [sp, #28]
 80055b2:	9307      	strlt	r3, [sp, #28]
 80055b4:	bfb8      	it	lt
 80055b6:	9204      	strlt	r2, [sp, #16]
 80055b8:	7823      	ldrb	r3, [r4, #0]
 80055ba:	2b2e      	cmp	r3, #46	; 0x2e
 80055bc:	d10c      	bne.n	80055d8 <_svfiprintf_r+0x130>
 80055be:	7863      	ldrb	r3, [r4, #1]
 80055c0:	2b2a      	cmp	r3, #42	; 0x2a
 80055c2:	d135      	bne.n	8005630 <_svfiprintf_r+0x188>
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	1d1a      	adds	r2, r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	9203      	str	r2, [sp, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bfb8      	it	lt
 80055d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80055d4:	3402      	adds	r4, #2
 80055d6:	9305      	str	r3, [sp, #20]
 80055d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056a4 <_svfiprintf_r+0x1fc>
 80055dc:	7821      	ldrb	r1, [r4, #0]
 80055de:	2203      	movs	r2, #3
 80055e0:	4650      	mov	r0, sl
 80055e2:	f7fa fe2d 	bl	8000240 <memchr>
 80055e6:	b140      	cbz	r0, 80055fa <_svfiprintf_r+0x152>
 80055e8:	2340      	movs	r3, #64	; 0x40
 80055ea:	eba0 000a 	sub.w	r0, r0, sl
 80055ee:	fa03 f000 	lsl.w	r0, r3, r0
 80055f2:	9b04      	ldr	r3, [sp, #16]
 80055f4:	4303      	orrs	r3, r0
 80055f6:	3401      	adds	r4, #1
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055fe:	4826      	ldr	r0, [pc, #152]	; (8005698 <_svfiprintf_r+0x1f0>)
 8005600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005604:	2206      	movs	r2, #6
 8005606:	f7fa fe1b 	bl	8000240 <memchr>
 800560a:	2800      	cmp	r0, #0
 800560c:	d038      	beq.n	8005680 <_svfiprintf_r+0x1d8>
 800560e:	4b23      	ldr	r3, [pc, #140]	; (800569c <_svfiprintf_r+0x1f4>)
 8005610:	bb1b      	cbnz	r3, 800565a <_svfiprintf_r+0x1b2>
 8005612:	9b03      	ldr	r3, [sp, #12]
 8005614:	3307      	adds	r3, #7
 8005616:	f023 0307 	bic.w	r3, r3, #7
 800561a:	3308      	adds	r3, #8
 800561c:	9303      	str	r3, [sp, #12]
 800561e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005620:	4433      	add	r3, r6
 8005622:	9309      	str	r3, [sp, #36]	; 0x24
 8005624:	e767      	b.n	80054f6 <_svfiprintf_r+0x4e>
 8005626:	fb0c 3202 	mla	r2, ip, r2, r3
 800562a:	460c      	mov	r4, r1
 800562c:	2001      	movs	r0, #1
 800562e:	e7a5      	b.n	800557c <_svfiprintf_r+0xd4>
 8005630:	2300      	movs	r3, #0
 8005632:	3401      	adds	r4, #1
 8005634:	9305      	str	r3, [sp, #20]
 8005636:	4619      	mov	r1, r3
 8005638:	f04f 0c0a 	mov.w	ip, #10
 800563c:	4620      	mov	r0, r4
 800563e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005642:	3a30      	subs	r2, #48	; 0x30
 8005644:	2a09      	cmp	r2, #9
 8005646:	d903      	bls.n	8005650 <_svfiprintf_r+0x1a8>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0c5      	beq.n	80055d8 <_svfiprintf_r+0x130>
 800564c:	9105      	str	r1, [sp, #20]
 800564e:	e7c3      	b.n	80055d8 <_svfiprintf_r+0x130>
 8005650:	fb0c 2101 	mla	r1, ip, r1, r2
 8005654:	4604      	mov	r4, r0
 8005656:	2301      	movs	r3, #1
 8005658:	e7f0      	b.n	800563c <_svfiprintf_r+0x194>
 800565a:	ab03      	add	r3, sp, #12
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	462a      	mov	r2, r5
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <_svfiprintf_r+0x1f8>)
 8005662:	a904      	add	r1, sp, #16
 8005664:	4638      	mov	r0, r7
 8005666:	f3af 8000 	nop.w
 800566a:	1c42      	adds	r2, r0, #1
 800566c:	4606      	mov	r6, r0
 800566e:	d1d6      	bne.n	800561e <_svfiprintf_r+0x176>
 8005670:	89ab      	ldrh	r3, [r5, #12]
 8005672:	065b      	lsls	r3, r3, #25
 8005674:	f53f af2c 	bmi.w	80054d0 <_svfiprintf_r+0x28>
 8005678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800567a:	b01d      	add	sp, #116	; 0x74
 800567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005680:	ab03      	add	r3, sp, #12
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	462a      	mov	r2, r5
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <_svfiprintf_r+0x1f8>)
 8005688:	a904      	add	r1, sp, #16
 800568a:	4638      	mov	r0, r7
 800568c:	f000 f9d4 	bl	8005a38 <_printf_i>
 8005690:	e7eb      	b.n	800566a <_svfiprintf_r+0x1c2>
 8005692:	bf00      	nop
 8005694:	080061dc 	.word	0x080061dc
 8005698:	080061e6 	.word	0x080061e6
 800569c:	00000000 	.word	0x00000000
 80056a0:	080053f1 	.word	0x080053f1
 80056a4:	080061e2 	.word	0x080061e2

080056a8 <__sfputc_r>:
 80056a8:	6893      	ldr	r3, [r2, #8]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	b410      	push	{r4}
 80056b0:	6093      	str	r3, [r2, #8]
 80056b2:	da08      	bge.n	80056c6 <__sfputc_r+0x1e>
 80056b4:	6994      	ldr	r4, [r2, #24]
 80056b6:	42a3      	cmp	r3, r4
 80056b8:	db01      	blt.n	80056be <__sfputc_r+0x16>
 80056ba:	290a      	cmp	r1, #10
 80056bc:	d103      	bne.n	80056c6 <__sfputc_r+0x1e>
 80056be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056c2:	f7ff ba9d 	b.w	8004c00 <__swbuf_r>
 80056c6:	6813      	ldr	r3, [r2, #0]
 80056c8:	1c58      	adds	r0, r3, #1
 80056ca:	6010      	str	r0, [r2, #0]
 80056cc:	7019      	strb	r1, [r3, #0]
 80056ce:	4608      	mov	r0, r1
 80056d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <__sfputs_r>:
 80056d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d8:	4606      	mov	r6, r0
 80056da:	460f      	mov	r7, r1
 80056dc:	4614      	mov	r4, r2
 80056de:	18d5      	adds	r5, r2, r3
 80056e0:	42ac      	cmp	r4, r5
 80056e2:	d101      	bne.n	80056e8 <__sfputs_r+0x12>
 80056e4:	2000      	movs	r0, #0
 80056e6:	e007      	b.n	80056f8 <__sfputs_r+0x22>
 80056e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ec:	463a      	mov	r2, r7
 80056ee:	4630      	mov	r0, r6
 80056f0:	f7ff ffda 	bl	80056a8 <__sfputc_r>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d1f3      	bne.n	80056e0 <__sfputs_r+0xa>
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056fc <_vfiprintf_r>:
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	460d      	mov	r5, r1
 8005702:	b09d      	sub	sp, #116	; 0x74
 8005704:	4614      	mov	r4, r2
 8005706:	4698      	mov	r8, r3
 8005708:	4606      	mov	r6, r0
 800570a:	b118      	cbz	r0, 8005714 <_vfiprintf_r+0x18>
 800570c:	6983      	ldr	r3, [r0, #24]
 800570e:	b90b      	cbnz	r3, 8005714 <_vfiprintf_r+0x18>
 8005710:	f7ff fc6e 	bl	8004ff0 <__sinit>
 8005714:	4b89      	ldr	r3, [pc, #548]	; (800593c <_vfiprintf_r+0x240>)
 8005716:	429d      	cmp	r5, r3
 8005718:	d11b      	bne.n	8005752 <_vfiprintf_r+0x56>
 800571a:	6875      	ldr	r5, [r6, #4]
 800571c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800571e:	07d9      	lsls	r1, r3, #31
 8005720:	d405      	bmi.n	800572e <_vfiprintf_r+0x32>
 8005722:	89ab      	ldrh	r3, [r5, #12]
 8005724:	059a      	lsls	r2, r3, #22
 8005726:	d402      	bmi.n	800572e <_vfiprintf_r+0x32>
 8005728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800572a:	f7ff fd11 	bl	8005150 <__retarget_lock_acquire_recursive>
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	071b      	lsls	r3, r3, #28
 8005732:	d501      	bpl.n	8005738 <_vfiprintf_r+0x3c>
 8005734:	692b      	ldr	r3, [r5, #16]
 8005736:	b9eb      	cbnz	r3, 8005774 <_vfiprintf_r+0x78>
 8005738:	4629      	mov	r1, r5
 800573a:	4630      	mov	r0, r6
 800573c:	f7ff fab2 	bl	8004ca4 <__swsetup_r>
 8005740:	b1c0      	cbz	r0, 8005774 <_vfiprintf_r+0x78>
 8005742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005744:	07dc      	lsls	r4, r3, #31
 8005746:	d50e      	bpl.n	8005766 <_vfiprintf_r+0x6a>
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	b01d      	add	sp, #116	; 0x74
 800574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005752:	4b7b      	ldr	r3, [pc, #492]	; (8005940 <_vfiprintf_r+0x244>)
 8005754:	429d      	cmp	r5, r3
 8005756:	d101      	bne.n	800575c <_vfiprintf_r+0x60>
 8005758:	68b5      	ldr	r5, [r6, #8]
 800575a:	e7df      	b.n	800571c <_vfiprintf_r+0x20>
 800575c:	4b79      	ldr	r3, [pc, #484]	; (8005944 <_vfiprintf_r+0x248>)
 800575e:	429d      	cmp	r5, r3
 8005760:	bf08      	it	eq
 8005762:	68f5      	ldreq	r5, [r6, #12]
 8005764:	e7da      	b.n	800571c <_vfiprintf_r+0x20>
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	0598      	lsls	r0, r3, #22
 800576a:	d4ed      	bmi.n	8005748 <_vfiprintf_r+0x4c>
 800576c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800576e:	f7ff fcf0 	bl	8005152 <__retarget_lock_release_recursive>
 8005772:	e7e9      	b.n	8005748 <_vfiprintf_r+0x4c>
 8005774:	2300      	movs	r3, #0
 8005776:	9309      	str	r3, [sp, #36]	; 0x24
 8005778:	2320      	movs	r3, #32
 800577a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800577e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005782:	2330      	movs	r3, #48	; 0x30
 8005784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005948 <_vfiprintf_r+0x24c>
 8005788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800578c:	f04f 0901 	mov.w	r9, #1
 8005790:	4623      	mov	r3, r4
 8005792:	469a      	mov	sl, r3
 8005794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005798:	b10a      	cbz	r2, 800579e <_vfiprintf_r+0xa2>
 800579a:	2a25      	cmp	r2, #37	; 0x25
 800579c:	d1f9      	bne.n	8005792 <_vfiprintf_r+0x96>
 800579e:	ebba 0b04 	subs.w	fp, sl, r4
 80057a2:	d00b      	beq.n	80057bc <_vfiprintf_r+0xc0>
 80057a4:	465b      	mov	r3, fp
 80057a6:	4622      	mov	r2, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	4630      	mov	r0, r6
 80057ac:	f7ff ff93 	bl	80056d6 <__sfputs_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	f000 80aa 	beq.w	800590a <_vfiprintf_r+0x20e>
 80057b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057b8:	445a      	add	r2, fp
 80057ba:	9209      	str	r2, [sp, #36]	; 0x24
 80057bc:	f89a 3000 	ldrb.w	r3, [sl]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80a2 	beq.w	800590a <_vfiprintf_r+0x20e>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d0:	f10a 0a01 	add.w	sl, sl, #1
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057dc:	931a      	str	r3, [sp, #104]	; 0x68
 80057de:	4654      	mov	r4, sl
 80057e0:	2205      	movs	r2, #5
 80057e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e6:	4858      	ldr	r0, [pc, #352]	; (8005948 <_vfiprintf_r+0x24c>)
 80057e8:	f7fa fd2a 	bl	8000240 <memchr>
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	b9d8      	cbnz	r0, 8005828 <_vfiprintf_r+0x12c>
 80057f0:	06d1      	lsls	r1, r2, #27
 80057f2:	bf44      	itt	mi
 80057f4:	2320      	movmi	r3, #32
 80057f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057fa:	0713      	lsls	r3, r2, #28
 80057fc:	bf44      	itt	mi
 80057fe:	232b      	movmi	r3, #43	; 0x2b
 8005800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005804:	f89a 3000 	ldrb.w	r3, [sl]
 8005808:	2b2a      	cmp	r3, #42	; 0x2a
 800580a:	d015      	beq.n	8005838 <_vfiprintf_r+0x13c>
 800580c:	9a07      	ldr	r2, [sp, #28]
 800580e:	4654      	mov	r4, sl
 8005810:	2000      	movs	r0, #0
 8005812:	f04f 0c0a 	mov.w	ip, #10
 8005816:	4621      	mov	r1, r4
 8005818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800581c:	3b30      	subs	r3, #48	; 0x30
 800581e:	2b09      	cmp	r3, #9
 8005820:	d94e      	bls.n	80058c0 <_vfiprintf_r+0x1c4>
 8005822:	b1b0      	cbz	r0, 8005852 <_vfiprintf_r+0x156>
 8005824:	9207      	str	r2, [sp, #28]
 8005826:	e014      	b.n	8005852 <_vfiprintf_r+0x156>
 8005828:	eba0 0308 	sub.w	r3, r0, r8
 800582c:	fa09 f303 	lsl.w	r3, r9, r3
 8005830:	4313      	orrs	r3, r2
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	46a2      	mov	sl, r4
 8005836:	e7d2      	b.n	80057de <_vfiprintf_r+0xe2>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	1d19      	adds	r1, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	9103      	str	r1, [sp, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfbb      	ittet	lt
 8005844:	425b      	neglt	r3, r3
 8005846:	f042 0202 	orrlt.w	r2, r2, #2
 800584a:	9307      	strge	r3, [sp, #28]
 800584c:	9307      	strlt	r3, [sp, #28]
 800584e:	bfb8      	it	lt
 8005850:	9204      	strlt	r2, [sp, #16]
 8005852:	7823      	ldrb	r3, [r4, #0]
 8005854:	2b2e      	cmp	r3, #46	; 0x2e
 8005856:	d10c      	bne.n	8005872 <_vfiprintf_r+0x176>
 8005858:	7863      	ldrb	r3, [r4, #1]
 800585a:	2b2a      	cmp	r3, #42	; 0x2a
 800585c:	d135      	bne.n	80058ca <_vfiprintf_r+0x1ce>
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	1d1a      	adds	r2, r3, #4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	9203      	str	r2, [sp, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	bfb8      	it	lt
 800586a:	f04f 33ff 	movlt.w	r3, #4294967295
 800586e:	3402      	adds	r4, #2
 8005870:	9305      	str	r3, [sp, #20]
 8005872:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005958 <_vfiprintf_r+0x25c>
 8005876:	7821      	ldrb	r1, [r4, #0]
 8005878:	2203      	movs	r2, #3
 800587a:	4650      	mov	r0, sl
 800587c:	f7fa fce0 	bl	8000240 <memchr>
 8005880:	b140      	cbz	r0, 8005894 <_vfiprintf_r+0x198>
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	eba0 000a 	sub.w	r0, r0, sl
 8005888:	fa03 f000 	lsl.w	r0, r3, r0
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	4303      	orrs	r3, r0
 8005890:	3401      	adds	r4, #1
 8005892:	9304      	str	r3, [sp, #16]
 8005894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005898:	482c      	ldr	r0, [pc, #176]	; (800594c <_vfiprintf_r+0x250>)
 800589a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800589e:	2206      	movs	r2, #6
 80058a0:	f7fa fcce 	bl	8000240 <memchr>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d03f      	beq.n	8005928 <_vfiprintf_r+0x22c>
 80058a8:	4b29      	ldr	r3, [pc, #164]	; (8005950 <_vfiprintf_r+0x254>)
 80058aa:	bb1b      	cbnz	r3, 80058f4 <_vfiprintf_r+0x1f8>
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	3307      	adds	r3, #7
 80058b0:	f023 0307 	bic.w	r3, r3, #7
 80058b4:	3308      	adds	r3, #8
 80058b6:	9303      	str	r3, [sp, #12]
 80058b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ba:	443b      	add	r3, r7
 80058bc:	9309      	str	r3, [sp, #36]	; 0x24
 80058be:	e767      	b.n	8005790 <_vfiprintf_r+0x94>
 80058c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80058c4:	460c      	mov	r4, r1
 80058c6:	2001      	movs	r0, #1
 80058c8:	e7a5      	b.n	8005816 <_vfiprintf_r+0x11a>
 80058ca:	2300      	movs	r3, #0
 80058cc:	3401      	adds	r4, #1
 80058ce:	9305      	str	r3, [sp, #20]
 80058d0:	4619      	mov	r1, r3
 80058d2:	f04f 0c0a 	mov.w	ip, #10
 80058d6:	4620      	mov	r0, r4
 80058d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058dc:	3a30      	subs	r2, #48	; 0x30
 80058de:	2a09      	cmp	r2, #9
 80058e0:	d903      	bls.n	80058ea <_vfiprintf_r+0x1ee>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0c5      	beq.n	8005872 <_vfiprintf_r+0x176>
 80058e6:	9105      	str	r1, [sp, #20]
 80058e8:	e7c3      	b.n	8005872 <_vfiprintf_r+0x176>
 80058ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80058ee:	4604      	mov	r4, r0
 80058f0:	2301      	movs	r3, #1
 80058f2:	e7f0      	b.n	80058d6 <_vfiprintf_r+0x1da>
 80058f4:	ab03      	add	r3, sp, #12
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	462a      	mov	r2, r5
 80058fa:	4b16      	ldr	r3, [pc, #88]	; (8005954 <_vfiprintf_r+0x258>)
 80058fc:	a904      	add	r1, sp, #16
 80058fe:	4630      	mov	r0, r6
 8005900:	f3af 8000 	nop.w
 8005904:	4607      	mov	r7, r0
 8005906:	1c78      	adds	r0, r7, #1
 8005908:	d1d6      	bne.n	80058b8 <_vfiprintf_r+0x1bc>
 800590a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800590c:	07d9      	lsls	r1, r3, #31
 800590e:	d405      	bmi.n	800591c <_vfiprintf_r+0x220>
 8005910:	89ab      	ldrh	r3, [r5, #12]
 8005912:	059a      	lsls	r2, r3, #22
 8005914:	d402      	bmi.n	800591c <_vfiprintf_r+0x220>
 8005916:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005918:	f7ff fc1b 	bl	8005152 <__retarget_lock_release_recursive>
 800591c:	89ab      	ldrh	r3, [r5, #12]
 800591e:	065b      	lsls	r3, r3, #25
 8005920:	f53f af12 	bmi.w	8005748 <_vfiprintf_r+0x4c>
 8005924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005926:	e711      	b.n	800574c <_vfiprintf_r+0x50>
 8005928:	ab03      	add	r3, sp, #12
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	462a      	mov	r2, r5
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <_vfiprintf_r+0x258>)
 8005930:	a904      	add	r1, sp, #16
 8005932:	4630      	mov	r0, r6
 8005934:	f000 f880 	bl	8005a38 <_printf_i>
 8005938:	e7e4      	b.n	8005904 <_vfiprintf_r+0x208>
 800593a:	bf00      	nop
 800593c:	0800619c 	.word	0x0800619c
 8005940:	080061bc 	.word	0x080061bc
 8005944:	0800617c 	.word	0x0800617c
 8005948:	080061dc 	.word	0x080061dc
 800594c:	080061e6 	.word	0x080061e6
 8005950:	00000000 	.word	0x00000000
 8005954:	080056d7 	.word	0x080056d7
 8005958:	080061e2 	.word	0x080061e2

0800595c <_printf_common>:
 800595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	4616      	mov	r6, r2
 8005962:	4699      	mov	r9, r3
 8005964:	688a      	ldr	r2, [r1, #8]
 8005966:	690b      	ldr	r3, [r1, #16]
 8005968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800596c:	4293      	cmp	r3, r2
 800596e:	bfb8      	it	lt
 8005970:	4613      	movlt	r3, r2
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005978:	4607      	mov	r7, r0
 800597a:	460c      	mov	r4, r1
 800597c:	b10a      	cbz	r2, 8005982 <_printf_common+0x26>
 800597e:	3301      	adds	r3, #1
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	0699      	lsls	r1, r3, #26
 8005986:	bf42      	ittt	mi
 8005988:	6833      	ldrmi	r3, [r6, #0]
 800598a:	3302      	addmi	r3, #2
 800598c:	6033      	strmi	r3, [r6, #0]
 800598e:	6825      	ldr	r5, [r4, #0]
 8005990:	f015 0506 	ands.w	r5, r5, #6
 8005994:	d106      	bne.n	80059a4 <_printf_common+0x48>
 8005996:	f104 0a19 	add.w	sl, r4, #25
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	6832      	ldr	r2, [r6, #0]
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dc26      	bgt.n	80059f2 <_printf_common+0x96>
 80059a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059a8:	1e13      	subs	r3, r2, #0
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	bf18      	it	ne
 80059ae:	2301      	movne	r3, #1
 80059b0:	0692      	lsls	r2, r2, #26
 80059b2:	d42b      	bmi.n	8005a0c <_printf_common+0xb0>
 80059b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059b8:	4649      	mov	r1, r9
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c0      	blx	r8
 80059be:	3001      	adds	r0, #1
 80059c0:	d01e      	beq.n	8005a00 <_printf_common+0xa4>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	68e5      	ldr	r5, [r4, #12]
 80059c6:	6832      	ldr	r2, [r6, #0]
 80059c8:	f003 0306 	and.w	r3, r3, #6
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	bf08      	it	eq
 80059d0:	1aad      	subeq	r5, r5, r2
 80059d2:	68a3      	ldr	r3, [r4, #8]
 80059d4:	6922      	ldr	r2, [r4, #16]
 80059d6:	bf0c      	ite	eq
 80059d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059dc:	2500      	movne	r5, #0
 80059de:	4293      	cmp	r3, r2
 80059e0:	bfc4      	itt	gt
 80059e2:	1a9b      	subgt	r3, r3, r2
 80059e4:	18ed      	addgt	r5, r5, r3
 80059e6:	2600      	movs	r6, #0
 80059e8:	341a      	adds	r4, #26
 80059ea:	42b5      	cmp	r5, r6
 80059ec:	d11a      	bne.n	8005a24 <_printf_common+0xc8>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e008      	b.n	8005a04 <_printf_common+0xa8>
 80059f2:	2301      	movs	r3, #1
 80059f4:	4652      	mov	r2, sl
 80059f6:	4649      	mov	r1, r9
 80059f8:	4638      	mov	r0, r7
 80059fa:	47c0      	blx	r8
 80059fc:	3001      	adds	r0, #1
 80059fe:	d103      	bne.n	8005a08 <_printf_common+0xac>
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295
 8005a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a08:	3501      	adds	r5, #1
 8005a0a:	e7c6      	b.n	800599a <_printf_common+0x3e>
 8005a0c:	18e1      	adds	r1, r4, r3
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	2030      	movs	r0, #48	; 0x30
 8005a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a16:	4422      	add	r2, r4
 8005a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a20:	3302      	adds	r3, #2
 8005a22:	e7c7      	b.n	80059b4 <_printf_common+0x58>
 8005a24:	2301      	movs	r3, #1
 8005a26:	4622      	mov	r2, r4
 8005a28:	4649      	mov	r1, r9
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	47c0      	blx	r8
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d0e6      	beq.n	8005a00 <_printf_common+0xa4>
 8005a32:	3601      	adds	r6, #1
 8005a34:	e7d9      	b.n	80059ea <_printf_common+0x8e>
	...

08005a38 <_printf_i>:
 8005a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	7e0f      	ldrb	r7, [r1, #24]
 8005a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a40:	2f78      	cmp	r7, #120	; 0x78
 8005a42:	4691      	mov	r9, r2
 8005a44:	4680      	mov	r8, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	469a      	mov	sl, r3
 8005a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a4e:	d807      	bhi.n	8005a60 <_printf_i+0x28>
 8005a50:	2f62      	cmp	r7, #98	; 0x62
 8005a52:	d80a      	bhi.n	8005a6a <_printf_i+0x32>
 8005a54:	2f00      	cmp	r7, #0
 8005a56:	f000 80d8 	beq.w	8005c0a <_printf_i+0x1d2>
 8005a5a:	2f58      	cmp	r7, #88	; 0x58
 8005a5c:	f000 80a3 	beq.w	8005ba6 <_printf_i+0x16e>
 8005a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a68:	e03a      	b.n	8005ae0 <_printf_i+0xa8>
 8005a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a6e:	2b15      	cmp	r3, #21
 8005a70:	d8f6      	bhi.n	8005a60 <_printf_i+0x28>
 8005a72:	a101      	add	r1, pc, #4	; (adr r1, 8005a78 <_printf_i+0x40>)
 8005a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a78:	08005ad1 	.word	0x08005ad1
 8005a7c:	08005ae5 	.word	0x08005ae5
 8005a80:	08005a61 	.word	0x08005a61
 8005a84:	08005a61 	.word	0x08005a61
 8005a88:	08005a61 	.word	0x08005a61
 8005a8c:	08005a61 	.word	0x08005a61
 8005a90:	08005ae5 	.word	0x08005ae5
 8005a94:	08005a61 	.word	0x08005a61
 8005a98:	08005a61 	.word	0x08005a61
 8005a9c:	08005a61 	.word	0x08005a61
 8005aa0:	08005a61 	.word	0x08005a61
 8005aa4:	08005bf1 	.word	0x08005bf1
 8005aa8:	08005b15 	.word	0x08005b15
 8005aac:	08005bd3 	.word	0x08005bd3
 8005ab0:	08005a61 	.word	0x08005a61
 8005ab4:	08005a61 	.word	0x08005a61
 8005ab8:	08005c13 	.word	0x08005c13
 8005abc:	08005a61 	.word	0x08005a61
 8005ac0:	08005b15 	.word	0x08005b15
 8005ac4:	08005a61 	.word	0x08005a61
 8005ac8:	08005a61 	.word	0x08005a61
 8005acc:	08005bdb 	.word	0x08005bdb
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	602a      	str	r2, [r5, #0]
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0a3      	b.n	8005c2c <_printf_i+0x1f4>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	6829      	ldr	r1, [r5, #0]
 8005ae8:	0606      	lsls	r6, r0, #24
 8005aea:	f101 0304 	add.w	r3, r1, #4
 8005aee:	d50a      	bpl.n	8005b06 <_printf_i+0xce>
 8005af0:	680e      	ldr	r6, [r1, #0]
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	2e00      	cmp	r6, #0
 8005af6:	da03      	bge.n	8005b00 <_printf_i+0xc8>
 8005af8:	232d      	movs	r3, #45	; 0x2d
 8005afa:	4276      	negs	r6, r6
 8005afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b00:	485e      	ldr	r0, [pc, #376]	; (8005c7c <_printf_i+0x244>)
 8005b02:	230a      	movs	r3, #10
 8005b04:	e019      	b.n	8005b3a <_printf_i+0x102>
 8005b06:	680e      	ldr	r6, [r1, #0]
 8005b08:	602b      	str	r3, [r5, #0]
 8005b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b0e:	bf18      	it	ne
 8005b10:	b236      	sxthne	r6, r6
 8005b12:	e7ef      	b.n	8005af4 <_printf_i+0xbc>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	1d19      	adds	r1, r3, #4
 8005b1a:	6029      	str	r1, [r5, #0]
 8005b1c:	0601      	lsls	r1, r0, #24
 8005b1e:	d501      	bpl.n	8005b24 <_printf_i+0xec>
 8005b20:	681e      	ldr	r6, [r3, #0]
 8005b22:	e002      	b.n	8005b2a <_printf_i+0xf2>
 8005b24:	0646      	lsls	r6, r0, #25
 8005b26:	d5fb      	bpl.n	8005b20 <_printf_i+0xe8>
 8005b28:	881e      	ldrh	r6, [r3, #0]
 8005b2a:	4854      	ldr	r0, [pc, #336]	; (8005c7c <_printf_i+0x244>)
 8005b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b2e:	bf0c      	ite	eq
 8005b30:	2308      	moveq	r3, #8
 8005b32:	230a      	movne	r3, #10
 8005b34:	2100      	movs	r1, #0
 8005b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b3a:	6865      	ldr	r5, [r4, #4]
 8005b3c:	60a5      	str	r5, [r4, #8]
 8005b3e:	2d00      	cmp	r5, #0
 8005b40:	bfa2      	ittt	ge
 8005b42:	6821      	ldrge	r1, [r4, #0]
 8005b44:	f021 0104 	bicge.w	r1, r1, #4
 8005b48:	6021      	strge	r1, [r4, #0]
 8005b4a:	b90e      	cbnz	r6, 8005b50 <_printf_i+0x118>
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	d04d      	beq.n	8005bec <_printf_i+0x1b4>
 8005b50:	4615      	mov	r5, r2
 8005b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b56:	fb03 6711 	mls	r7, r3, r1, r6
 8005b5a:	5dc7      	ldrb	r7, [r0, r7]
 8005b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b60:	4637      	mov	r7, r6
 8005b62:	42bb      	cmp	r3, r7
 8005b64:	460e      	mov	r6, r1
 8005b66:	d9f4      	bls.n	8005b52 <_printf_i+0x11a>
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d10b      	bne.n	8005b84 <_printf_i+0x14c>
 8005b6c:	6823      	ldr	r3, [r4, #0]
 8005b6e:	07de      	lsls	r6, r3, #31
 8005b70:	d508      	bpl.n	8005b84 <_printf_i+0x14c>
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	6861      	ldr	r1, [r4, #4]
 8005b76:	4299      	cmp	r1, r3
 8005b78:	bfde      	ittt	le
 8005b7a:	2330      	movle	r3, #48	; 0x30
 8005b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b84:	1b52      	subs	r2, r2, r5
 8005b86:	6122      	str	r2, [r4, #16]
 8005b88:	f8cd a000 	str.w	sl, [sp]
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	aa03      	add	r2, sp, #12
 8005b90:	4621      	mov	r1, r4
 8005b92:	4640      	mov	r0, r8
 8005b94:	f7ff fee2 	bl	800595c <_printf_common>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d14c      	bne.n	8005c36 <_printf_i+0x1fe>
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	b004      	add	sp, #16
 8005ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba6:	4835      	ldr	r0, [pc, #212]	; (8005c7c <_printf_i+0x244>)
 8005ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bac:	6829      	ldr	r1, [r5, #0]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bb4:	6029      	str	r1, [r5, #0]
 8005bb6:	061d      	lsls	r5, r3, #24
 8005bb8:	d514      	bpl.n	8005be4 <_printf_i+0x1ac>
 8005bba:	07df      	lsls	r7, r3, #31
 8005bbc:	bf44      	itt	mi
 8005bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc2:	6023      	strmi	r3, [r4, #0]
 8005bc4:	b91e      	cbnz	r6, 8005bce <_printf_i+0x196>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	f023 0320 	bic.w	r3, r3, #32
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	2310      	movs	r3, #16
 8005bd0:	e7b0      	b.n	8005b34 <_printf_i+0xfc>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	f043 0320 	orr.w	r3, r3, #32
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	2378      	movs	r3, #120	; 0x78
 8005bdc:	4828      	ldr	r0, [pc, #160]	; (8005c80 <_printf_i+0x248>)
 8005bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005be2:	e7e3      	b.n	8005bac <_printf_i+0x174>
 8005be4:	0659      	lsls	r1, r3, #25
 8005be6:	bf48      	it	mi
 8005be8:	b2b6      	uxthmi	r6, r6
 8005bea:	e7e6      	b.n	8005bba <_printf_i+0x182>
 8005bec:	4615      	mov	r5, r2
 8005bee:	e7bb      	b.n	8005b68 <_printf_i+0x130>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	6826      	ldr	r6, [r4, #0]
 8005bf4:	6961      	ldr	r1, [r4, #20]
 8005bf6:	1d18      	adds	r0, r3, #4
 8005bf8:	6028      	str	r0, [r5, #0]
 8005bfa:	0635      	lsls	r5, r6, #24
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	d501      	bpl.n	8005c04 <_printf_i+0x1cc>
 8005c00:	6019      	str	r1, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <_printf_i+0x1d2>
 8005c04:	0670      	lsls	r0, r6, #25
 8005c06:	d5fb      	bpl.n	8005c00 <_printf_i+0x1c8>
 8005c08:	8019      	strh	r1, [r3, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	4615      	mov	r5, r2
 8005c10:	e7ba      	b.n	8005b88 <_printf_i+0x150>
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	681d      	ldr	r5, [r3, #0]
 8005c1a:	6862      	ldr	r2, [r4, #4]
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f7fa fb0e 	bl	8000240 <memchr>
 8005c24:	b108      	cbz	r0, 8005c2a <_printf_i+0x1f2>
 8005c26:	1b40      	subs	r0, r0, r5
 8005c28:	6060      	str	r0, [r4, #4]
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	6123      	str	r3, [r4, #16]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c34:	e7a8      	b.n	8005b88 <_printf_i+0x150>
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	462a      	mov	r2, r5
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	47d0      	blx	sl
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0ab      	beq.n	8005b9c <_printf_i+0x164>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	d413      	bmi.n	8005c72 <_printf_i+0x23a>
 8005c4a:	68e0      	ldr	r0, [r4, #12]
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	4298      	cmp	r0, r3
 8005c50:	bfb8      	it	lt
 8005c52:	4618      	movlt	r0, r3
 8005c54:	e7a4      	b.n	8005ba0 <_printf_i+0x168>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	47d0      	blx	sl
 8005c60:	3001      	adds	r0, #1
 8005c62:	d09b      	beq.n	8005b9c <_printf_i+0x164>
 8005c64:	3501      	adds	r5, #1
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	9903      	ldr	r1, [sp, #12]
 8005c6a:	1a5b      	subs	r3, r3, r1
 8005c6c:	42ab      	cmp	r3, r5
 8005c6e:	dcf2      	bgt.n	8005c56 <_printf_i+0x21e>
 8005c70:	e7eb      	b.n	8005c4a <_printf_i+0x212>
 8005c72:	2500      	movs	r5, #0
 8005c74:	f104 0619 	add.w	r6, r4, #25
 8005c78:	e7f5      	b.n	8005c66 <_printf_i+0x22e>
 8005c7a:	bf00      	nop
 8005c7c:	080061ed 	.word	0x080061ed
 8005c80:	080061fe 	.word	0x080061fe

08005c84 <_sbrk_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	; (8005ca0 <_sbrk_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f7fb fa24 	bl	80010dc <_sbrk>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_sbrk_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_sbrk_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	200004a4 	.word	0x200004a4

08005ca4 <__sread>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cac:	f000 f900 	bl	8005eb0 <_read_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	bfab      	itete	ge
 8005cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005cb8:	181b      	addge	r3, r3, r0
 8005cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cbe:	bfac      	ite	ge
 8005cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cc2:	81a3      	strhlt	r3, [r4, #12]
 8005cc4:	bd10      	pop	{r4, pc}

08005cc6 <__swrite>:
 8005cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cca:	461f      	mov	r7, r3
 8005ccc:	898b      	ldrh	r3, [r1, #12]
 8005cce:	05db      	lsls	r3, r3, #23
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	d505      	bpl.n	8005ce4 <__swrite+0x1e>
 8005cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cdc:	2302      	movs	r3, #2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f000 f870 	bl	8005dc4 <_lseek_r>
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	4632      	mov	r2, r6
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfa:	f000 b817 	b.w	8005d2c <_write_r>

08005cfe <__sseek>:
 8005cfe:	b510      	push	{r4, lr}
 8005d00:	460c      	mov	r4, r1
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f000 f85d 	bl	8005dc4 <_lseek_r>
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	bf15      	itete	ne
 8005d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d1a:	81a3      	strheq	r3, [r4, #12]
 8005d1c:	bf18      	it	ne
 8005d1e:	81a3      	strhne	r3, [r4, #12]
 8005d20:	bd10      	pop	{r4, pc}

08005d22 <__sclose>:
 8005d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d26:	f000 b81b 	b.w	8005d60 <_close_r>
	...

08005d2c <_write_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_write_r+0x20>)
 8005d30:	4604      	mov	r4, r0
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	602a      	str	r2, [r5, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	f7fb f97d 	bl	800103a <_write>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_write_r+0x1e>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_write_r+0x1e>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	200004a4 	.word	0x200004a4

08005d50 <abort>:
 8005d50:	b508      	push	{r3, lr}
 8005d52:	2006      	movs	r0, #6
 8005d54:	f000 f8e6 	bl	8005f24 <raise>
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f7fb f947 	bl	8000fec <_exit>
	...

08005d60 <_close_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4d06      	ldr	r5, [pc, #24]	; (8005d7c <_close_r+0x1c>)
 8005d64:	2300      	movs	r3, #0
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	f7fb f981 	bl	8001072 <_close>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d102      	bne.n	8005d7a <_close_r+0x1a>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	b103      	cbz	r3, 8005d7a <_close_r+0x1a>
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	200004a4 	.word	0x200004a4

08005d80 <_fstat_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d07      	ldr	r5, [pc, #28]	; (8005da0 <_fstat_r+0x20>)
 8005d84:	2300      	movs	r3, #0
 8005d86:	4604      	mov	r4, r0
 8005d88:	4608      	mov	r0, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	602b      	str	r3, [r5, #0]
 8005d8e:	f7fb f97c 	bl	800108a <_fstat>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d102      	bne.n	8005d9c <_fstat_r+0x1c>
 8005d96:	682b      	ldr	r3, [r5, #0]
 8005d98:	b103      	cbz	r3, 8005d9c <_fstat_r+0x1c>
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	bd38      	pop	{r3, r4, r5, pc}
 8005d9e:	bf00      	nop
 8005da0:	200004a4 	.word	0x200004a4

08005da4 <_isatty_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4d06      	ldr	r5, [pc, #24]	; (8005dc0 <_isatty_r+0x1c>)
 8005da8:	2300      	movs	r3, #0
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	f7fb f97b 	bl	80010aa <_isatty>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_isatty_r+0x1a>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_isatty_r+0x1a>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	200004a4 	.word	0x200004a4

08005dc4 <_lseek_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d07      	ldr	r5, [pc, #28]	; (8005de4 <_lseek_r+0x20>)
 8005dc8:	4604      	mov	r4, r0
 8005dca:	4608      	mov	r0, r1
 8005dcc:	4611      	mov	r1, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	602a      	str	r2, [r5, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7fb f974 	bl	80010c0 <_lseek>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_lseek_r+0x1e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_lseek_r+0x1e>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	200004a4 	.word	0x200004a4

08005de8 <memcpy>:
 8005de8:	440a      	add	r2, r1
 8005dea:	4291      	cmp	r1, r2
 8005dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df0:	d100      	bne.n	8005df4 <memcpy+0xc>
 8005df2:	4770      	bx	lr
 8005df4:	b510      	push	{r4, lr}
 8005df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	d1f9      	bne.n	8005df6 <memcpy+0xe>
 8005e02:	bd10      	pop	{r4, pc}

08005e04 <memmove>:
 8005e04:	4288      	cmp	r0, r1
 8005e06:	b510      	push	{r4, lr}
 8005e08:	eb01 0402 	add.w	r4, r1, r2
 8005e0c:	d902      	bls.n	8005e14 <memmove+0x10>
 8005e0e:	4284      	cmp	r4, r0
 8005e10:	4623      	mov	r3, r4
 8005e12:	d807      	bhi.n	8005e24 <memmove+0x20>
 8005e14:	1e43      	subs	r3, r0, #1
 8005e16:	42a1      	cmp	r1, r4
 8005e18:	d008      	beq.n	8005e2c <memmove+0x28>
 8005e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e22:	e7f8      	b.n	8005e16 <memmove+0x12>
 8005e24:	4402      	add	r2, r0
 8005e26:	4601      	mov	r1, r0
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	d100      	bne.n	8005e2e <memmove+0x2a>
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e36:	e7f7      	b.n	8005e28 <memmove+0x24>

08005e38 <__malloc_lock>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__malloc_lock+0x8>)
 8005e3a:	f7ff b989 	b.w	8005150 <__retarget_lock_acquire_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20000498 	.word	0x20000498

08005e44 <__malloc_unlock>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__malloc_unlock+0x8>)
 8005e46:	f7ff b984 	b.w	8005152 <__retarget_lock_release_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20000498 	.word	0x20000498

08005e50 <_realloc_r>:
 8005e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e54:	4680      	mov	r8, r0
 8005e56:	4614      	mov	r4, r2
 8005e58:	460e      	mov	r6, r1
 8005e5a:	b921      	cbnz	r1, 8005e66 <_realloc_r+0x16>
 8005e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e60:	4611      	mov	r1, r2
 8005e62:	f7ff ba51 	b.w	8005308 <_malloc_r>
 8005e66:	b92a      	cbnz	r2, 8005e74 <_realloc_r+0x24>
 8005e68:	f7ff f9e2 	bl	8005230 <_free_r>
 8005e6c:	4625      	mov	r5, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e74:	f000 f872 	bl	8005f5c <_malloc_usable_size_r>
 8005e78:	4284      	cmp	r4, r0
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	d802      	bhi.n	8005e84 <_realloc_r+0x34>
 8005e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e82:	d812      	bhi.n	8005eaa <_realloc_r+0x5a>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4640      	mov	r0, r8
 8005e88:	f7ff fa3e 	bl	8005308 <_malloc_r>
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d0ed      	beq.n	8005e6e <_realloc_r+0x1e>
 8005e92:	42bc      	cmp	r4, r7
 8005e94:	4622      	mov	r2, r4
 8005e96:	4631      	mov	r1, r6
 8005e98:	bf28      	it	cs
 8005e9a:	463a      	movcs	r2, r7
 8005e9c:	f7ff ffa4 	bl	8005de8 <memcpy>
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	f7ff f9c4 	bl	8005230 <_free_r>
 8005ea8:	e7e1      	b.n	8005e6e <_realloc_r+0x1e>
 8005eaa:	4635      	mov	r5, r6
 8005eac:	e7df      	b.n	8005e6e <_realloc_r+0x1e>
	...

08005eb0 <_read_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	; (8005ed0 <_read_r+0x20>)
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	4611      	mov	r1, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb f89e 	bl	8001000 <_read>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_read_r+0x1e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_read_r+0x1e>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	200004a4 	.word	0x200004a4

08005ed4 <_raise_r>:
 8005ed4:	291f      	cmp	r1, #31
 8005ed6:	b538      	push	{r3, r4, r5, lr}
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	d904      	bls.n	8005ee8 <_raise_r+0x14>
 8005ede:	2316      	movs	r3, #22
 8005ee0:	6003      	str	r3, [r0, #0]
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005eea:	b112      	cbz	r2, 8005ef2 <_raise_r+0x1e>
 8005eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ef0:	b94b      	cbnz	r3, 8005f06 <_raise_r+0x32>
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f830 	bl	8005f58 <_getpid_r>
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4601      	mov	r1, r0
 8005efc:	4620      	mov	r0, r4
 8005efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f02:	f000 b817 	b.w	8005f34 <_kill_r>
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d00a      	beq.n	8005f20 <_raise_r+0x4c>
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	d103      	bne.n	8005f16 <_raise_r+0x42>
 8005f0e:	2316      	movs	r3, #22
 8005f10:	6003      	str	r3, [r0, #0]
 8005f12:	2001      	movs	r0, #1
 8005f14:	e7e7      	b.n	8005ee6 <_raise_r+0x12>
 8005f16:	2400      	movs	r4, #0
 8005f18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	4798      	blx	r3
 8005f20:	2000      	movs	r0, #0
 8005f22:	e7e0      	b.n	8005ee6 <_raise_r+0x12>

08005f24 <raise>:
 8005f24:	4b02      	ldr	r3, [pc, #8]	; (8005f30 <raise+0xc>)
 8005f26:	4601      	mov	r1, r0
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f7ff bfd3 	b.w	8005ed4 <_raise_r>
 8005f2e:	bf00      	nop
 8005f30:	200001c0 	.word	0x200001c0

08005f34 <_kill_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	; (8005f54 <_kill_r+0x20>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	f7fb f843 	bl	8000fcc <_kill>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d102      	bne.n	8005f50 <_kill_r+0x1c>
 8005f4a:	682b      	ldr	r3, [r5, #0]
 8005f4c:	b103      	cbz	r3, 8005f50 <_kill_r+0x1c>
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
 8005f52:	bf00      	nop
 8005f54:	200004a4 	.word	0x200004a4

08005f58 <_getpid_r>:
 8005f58:	f7fb b830 	b.w	8000fbc <_getpid>

08005f5c <_malloc_usable_size_r>:
 8005f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f60:	1f18      	subs	r0, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfbc      	itt	lt
 8005f66:	580b      	ldrlt	r3, [r1, r0]
 8005f68:	18c0      	addlt	r0, r0, r3
 8005f6a:	4770      	bx	lr

08005f6c <_init>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr

08005f78 <_fini>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr
